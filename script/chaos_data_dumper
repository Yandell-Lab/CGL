#!/usr/bin/perl -w 
use strict;

use Getopt::Std;
use vars qw($opt_t $opt_p $opt_c);
getopts('t p c');

use lib ('/Users/myandell/lib',
	);

BEGIN {
	$ENV{'CGL_CHATTER'} = 1;
}

$| = 1;
$SIG{INT} = \&gotControlC;
use FileHandle;
use CGL::Annotation;
use CGL::Annotation::Iterator;
use PostData;
use FastaFile;
use Fasta;

my $usage = "

chaos_data_dumper: takes a Chaos XML file & dumps the contig, transcripts and proteins from it 

OPTIONS: -t (transcripts) -p (proteins) -c (contigs)

chaos_data_dumper -t:-p:-c <chaos.xml file>

example : chaos_data_dumper -t <chaos.xml file>

\n"; 

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

die $usage unless $ARGV[0];

die $usage unless (defined $opt_t || defined $opt_p || defined $opt_c); 

my $file  = $ARGV[0];

my (@CONTIGS, @TRANSCRIPTS, @PROTEINS);

my $chaos = new CGL::Annotation($file);

my $focus = $chaos->meta_data('focus_feature_id') || 'no focus given in file';


my $iterator = new CGL::Annotation::Iterator($chaos);

my $s = $chaos->contig(0);

to_fasta($s);

while (my $g = $iterator->next_by_gene()){

	next unless $g->id eq $focus;
	my $i = 0;
	while(my $t = $g->transcript($i)){
		to_fasta($t);
		my $p = $t->translation(0);
		to_fasta($p);	
		$i++;
	}
} 
if    ($opt_t){
	dump_it(\@TRANSCRIPTS);
}
elsif ($opt_p){
	dump_it(\@TRANSCRIPTS);
}
elsif ($opt_c){
	dump_it(\@TRANSCRIPTS);
}
else {
}
#-----------------------------------------------------------------------------
#---------------------------------- SUBS -------------------------------------
#-----------------------------------------------------------------------------
sub dump_it {

	my $data;

	if    ($opt_t){
        	$data = \@TRANSCRIPTS;
	}
	elsif ($opt_p){
        	$data = \@PROTEINS;
	}
	elsif ($opt_c){
        	$data = \@CONTIGS;
	}

	foreach my $fasta (@{$data}){
		print $$fasta;
	}
}
#-----------------------------------------------------------------------------
sub to_fasta {
	my $o = shift;

	my $fasta = Fasta::toFasta('>'.$o->name(), \$o->residues());

	if (ref($o) =~ /Protein$/){
		push(@PROTEINS, $fasta);
	}
	elsif (ref($o) =~ /Transcript$/){
		push(@TRANSCRIPTS, $fasta);
	}
	elsif (ref($o) =~ /Contig$/){
		push(@CONTIGS, $fasta);
        }
        else {
		die "Unknow type passed to sub to_fasta:".ref($o)."\n";
        }

}
#-----------------------------------------------------------------------------
sub gotControlC {

	die "died in chaos_data_dumper::gotContolC\n";
}
#-----------------------------------------------------------------------------
