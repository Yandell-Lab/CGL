#!/usr/bin/perl
use strict;
use warnings;

use lib "$ENV{CGL_GFF_LIB}";

use CGL::Annotation;
use CGL::Annotation::GFF3::Maker;
use CGL::Annotation::Iterator;
use Iterator::Fasta;
use compare;
use SimpleCluster;
use Fasta;
use Shadower;
use PostData;
use Getopt::Std;
our($opt_p);
getopt('l');

$| = 1;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

allesandro <maker gff3 file> <fasta file> 

";

my $gff3_file   = shift;
my $fasta_file  = shift;

die $usage unless defined($gff3_file) && defined($fasta_file);

print STDERR "loading gff3...\n";
my $cgl = new CGL::Annotation::GFF3::Maker($gff3_file, $fasta_file);
print STDERR "finished.\n";

my $iterator = new CGL::Annotation::Iterator($cgl);

my $c    = $cgl->contig(0);
my $c_id = $c->id();

my $length = 60;

#get_expected($c, $length);

while (my $g = $iterator->next_by_gene()){
	my $i = 0;
	while (my $t = $g->transcript($i)){

		my $t_id   = $t->id();
		my $strand = $t->strand();
		my $p      = $t->translation(0);

		my ($qi) = $t->name =~ /.*(QI\:.*)$/;
 
		next unless defined($p->residues);
	
		if ($p->residues =~ /^M/){
			my ($pos, $c_pos, $seq_up, $seq_dn, $class) = scan_class_1($c, $t, $length);
			print "$c_id\t$t_id\t$class\t$pos\t$c_pos\t$seq_up\|$seq_dn\t$strand\t$qi\n"
                	if $pos != -1 && $class == 1;

		}
		elsif (uc($t->residues) =~ /^A/){
                        my ($pos, $c_pos, $seq_up, $seq_dn, $class) = scan_class_2($c, $t, $length);
                        print "$c_id\t$t_id\t$class\t$pos\t$c_pos\t$seq_up\|$seq_dn\t$strand\t$qi\n"
                        if $pos != -1 && $class == 2;

		}
		else {
		}
		$i++;
	}
}

#-----------------------------------------------------------------------------
#------------------------------- SUBROUTINES ---------------------------------
#-----------------------------------------------------------------------------
sub get_expected {
	my $c      = shift;
	my $length = shift;


	my $anywhere = 0;
	my $edge     = 0;
	my $scanned  = 0;
	my $look = 'TTTAGA';
	my $i = 0;
	while (my $seq = substr($c->residues, $i, $length)){
		
		$anywhere++ if uc($seq) =~ /$look/;
		$edge++     if uc($seq) =~ /$look$/;
		if (uc($seq) =~ /$look/){
			$anywhere++;
		}
		$scanned++;
		$i+= $length;

	}

	my $any = $anywhere/$scanned;
	my $ede = $edge/$scanned;

	print "any:$any ede:$ede\n";

	die;

}
#-----------------------------------------------------------------------------
sub scan_class_1 {
	my $c      = shift;
	my $t      = shift;
	my $length = shift;

	my $strand = $t->strand();

	my $p = $t->translation(0);

	my $p_b_on_t = $p->metaPos($t, 0);
	my $p_b_on_c = $t->metaPos($c, $p_b_on_t);

	my $seq_tag_up = get_upstream_seq($c->residues, $p_b_on_c, $length, $strand);
	my $seq_tag_dn = uc substr($t->residues, 0, 100);

	my $look = 'TTTAGA';

	my $pos = index($seq_tag_up, $look);

	   $pos = length($seq_tag_up) - $pos - length($look) + 1 unless $pos == -1;


	my $beg_tag = uc substr($t->residues, 0, 3);

	my $class;
	if ($beg_tag =~ /^ATG/){
		$class = 1;
	}
	else {
		$class = 3;
	}

	my $c_pos;
	if ($strand == 1){
		$c_pos = $p_b_on_c - $pos;
		
	}
	else {
		$c_pos = $p_b_on_c + $pos;
	} 
	return ($pos, $c_pos, $seq_tag_up, $seq_tag_dn, $class);
}
#-----------------------------------------------------------------------------
sub scan_class_2 {
        my $c      = shift;
        my $t      = shift;
        my $length = shift;

        my $strand = $t->strand();

        my $p = $t->translation(0);

        my $p_b_on_t = $p->metaPos($t, 0);
        my $p_b_on_c = $t->metaPos($c, $p_b_on_t);

        my $seq_tag_up = get_upstream_seq($c->residues, $p_b_on_c, $length, $strand);
        my $seq_tag_dn = uc substr($t->residues, 0, 100);

        my $look = 'TTTAG';

        my $pos = index($seq_tag_up, $look);

           $pos = length($seq_tag_up) - $pos - length($look) + 1 unless $pos == -1;


        my $class;
        if (uc($t->residues) =~ /^A/ && $pos == 1){
                $class = 2;
        }
        else {
                $class = 4;
        }

        my $c_pos;
        if ($strand == 1){
                $c_pos = $p_b_on_c - $pos;

        }
        else {
                $c_pos = $p_b_on_c + $pos;
        }
        return ($pos, $c_pos, $seq_tag_up, $seq_tag_dn, $class);
}
#-----------------------------------------------------------------------------
sub get_upstream_seq {
	my $seq      = shift;
	my $p_b_on_c = shift;
	my $length   = shift;
	my $strand   = shift;

	my $tag;
	if ($strand == 1){
		$tag = substr($seq, $p_b_on_c - $length , $length);  
	}
	else {
		$tag = substr($seq, $p_b_on_c, $length);
		$tag = Fasta::revComp($tag);
	}

	return uc($tag);
}
#-----------------------------------------------------------------------------
sub get_dnstream_seq {
        my $seq      = shift;
        my $p_b_on_c = shift;
        my $length   = shift;
        my $strand   = shift;

        my $tag;
        if ($strand == 1){
                $tag = substr($seq, $p_b_on_c, $length);
        }
        else {
                $tag = substr($seq, $p_b_on_c - $length, $length);
                $tag = Fasta::revComp($tag);
        }

        return uc($tag);
}
#-----------------------------------------------------------------------------






