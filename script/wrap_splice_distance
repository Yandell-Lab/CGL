#!/usr/bin/perl 
use strict;
use warnings;
use Getopt::Long;

#----------------------------------------------------------------------------- 
#----------------------------------- MAIN ------------------------------------ 
#----------------------------------------------------------------------------- 
my $usage = "

Synopsis:

wrap_splice_distance -type [exonic|nucleo] --format [choas|gff] \
     --org FlyBase master_datastore1 master_datstore2 id_map

Description:

Pass this script two master_datastore_indexes and an id_map.  It will
pass correspoding genes to splice_distance_exonic. 

Options:

    -type    Do exonic or nucleotide distance.  Default is exonic.
    -format  What is the input format, chaos or gff?

";

my ($type, $out, $format, $org);
my $opt_success = GetOptions('type=s'   => \$type,
			     'out=s'    => \$out,
			     'format=s' => \$format,
			     'org=s'    => \$org,
			     );

my ($md1_file, $md2_file, $id_map) = @ARGV;

die $usage unless ($md1_file && $md2_file);
die "-type flag must be either nucleo or exonic, not $type\n\n$usage" 
    unless ($type =~ /nucleo|exonic/);
die "-format flag must be either gff or chaos, not $format\n\n$usage" 
    unless ($format =~ /gff|chaos/); 
die "-org flag must match [FlyBase|WormBase|WormBaseOld]"
    unless $org =~ /FlyBase|WormBase|WormBaseOld/;

my $md1 = parse_datastore($md1_file);
my $md2 = parse_datastore($md2_file);
my $map = parse_id_map($id_map) if $id_map;

my $type_format = "${type}_${format}";

 GENE:
    for my $id1 (keys %{$md1}) {

	    my $id2;

	    if (defined $map && ! exists $map->{$id1}) {
		    print STDERR "No matching gene for $id1\n";
		    next GENE;
	    }
	    elsif (defined $map && exists $map->{$id1}) {
		    $id2 = $map->{$id1};
	    }
	    elsif (! defined $map) {
		    $id2 = $id1;
	    }
	    else {
		    die "Major malfunction!  Can't assign ID2\n";
	    }

	    unless (exists $md1->{$id1}) {
		    print STDERR "Missing path for ID1: $id1\n";
		    next GENE;
	    }
	    unless (exists $md2->{$id2}) {
		    print STDERR "Missing path for ID2: $id2\n";
		    next GENE;
	    }
	    
	    my $gff_path1 = 
		$md1->{$id1} ? $md1->{$id1} : undef;
	    my $gff_path2 = 
		$md2->{$id2} ? $md2->{$id2} : undef;

	    my $chaos_path1 = $gff_path1;
	    my $chaos_path2 = $gff_path2;

 	    my $fasta_path1;
	    my $fasta_path2;

	    ($fasta_path1 = $gff_path1) =~ s/.gff3/.fasta/; 
	    ($fasta_path2 = $gff_path2) =~ s/.gff3/.fasta/;

	    my %command_lines = (nucleo_gff   => "splice_distance_nucleo --gff_i $gff_path1 --fasta_i " . 
				                 "$fasta_path1 --gff_j $gff_path2 --fasta_j $fasta_path2 " .
				                 "--format_i $org",
				 exonic_gff   => "splice_distance_exonic --gff_i $gff_path1 --fasta_i " . 
				                 "$fasta_path1 --gff_j $gff_path2 --fasta_j $fasta_path2",
				 nucleo_chaos => "splice_distance_nucleo --chaos_i $chaos_path1 --chaos_j $chaos_path2",
				 exonic_chaos => "splice_distance_exonic --chaos_i $chaos_path1 --chaos_j $chaos_path2");

	    my $command_line = $command_lines{$type_format};

	    print STDERR "$command_line\n";
	    print `$command_line`;
            if ($?) {
                    print "\n";
                    print STDERR "$id1 $id2 pair died with errors: $?\n";
            }

    }

#----------------------------------------------------------------------------- 
#-------------------------------- SUBROUTINES -------------------------------- 
#----------------------------------------------------------------------------- 

sub parse_datastore {
	my $file = shift;

	open (my $IN, '<', $file) or die "Can't open $file\n";

	my %md;
	while (<$IN>) {
		chomp;
		my @fields = split;
		my ($id, $path) = 
		      $format =~ /gff/i   ?  ($fields[0], $fields[1])
		    : $format =~ /chaos/i ?  ($fields[1], $fields[3])
		    :                        (undef, undef);
		die "Incorrect format specified.  Can't parse datastore\n" 
		    unless (defined $id && defined $path);

#		$id =~ s/:no_locus_tag$//;
		$id =~ s/:(no_locus_tag)?$//;

		$md{$id} = $path;
	}
	return \%md;
}

sub parse_id_map {
	my $file = shift;

	open (my $IN, '<', $file) or die "Can't open $file\n";

	my %map;
	while (<$IN>) {
		my ($id1, $id2) = split;
		$id1 =~ s/:no_locus_tag$//;
		$id2 =~ s/:no_locus_tag$//;
		$map{$id1} = $id2;
	}
	return \%map;
}
