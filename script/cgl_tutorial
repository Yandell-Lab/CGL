#!/usr/bin/perl -w 
use strict;

# pod docs at end.

BEGIN {
	$ENV{'CGL_CHATTER'} = 1;
}

$| = 1;
$SIG{INT} = \&gotControlC;
use lib $ENV{CGL_GFF_LIB};
use FileHandle;
use CGL::Annotation;
use CGL::Annotation::GFF3::FlyBase;
use CGL::Annotation::Iterator;

my $usage = "

cgl_tutorial: tutorial script for the CGL library.  This script demonstrates
many of the functions of the CGL library. 

cgl_tutorial <gff3_file> <fasta_file> <one or more ids> 

cgl_tutorial ./sample_data/4.gff ../sample_data/dmel-4-chromosome-r4.3.fasta  FBtr0089155 FBgn0040037 


\n"; 

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

die $usage unless $ARGV[1];

my ($gff_file, $fasta_file, @ids) = @ARGV;

my $ids_ref;
scalar @ids > 0 
    ? $ids_ref = \@ids 
    : undef($ids_ref);

my $cgl = new CGL::Annotation::GFF3::FlyBase($gff_file, $fasta_file, $ids_ref);

my $iterator = new CGL::Annotation::Iterator($cgl);

my $contig = $cgl->contig(0);
print "contig strand:".$contig->strand()."\n";

unless (defined($contig->residues)){
	print "this file is lacking the contig residues! exiting.\n";
	exit(0);
}
my $g = $cgl->gene(0);
my $t = $g->transcript(0);

while (my $g = $iterator->next_by_gene()){

	print "gene id:".$g->id."\n";
	print "TYPE:".$g->type."\n";
	my $i = 0;
	while(my $t = $g->transcript($i)){



		my $p = $t->translation(0);

		print "protein residues: " . $p->residues . "\n";

		my $translation_offset = defined($p) ? $p->metaPos($t, 0) : 'NA';


		print "transcript type:".$t->type."\n";
		print "transcript strand:".$t->strand()."\n";
		print "transcript:".$t->residues()."\n";
		my $trans_e_on_t = defined($p) ? $t->translationEndInTranscript($p->id) : 'NA';
		print "trans_e_on_t:$trans_e_on_t\n";
		my $stop_codon = defined($p) ? substr($t->residues, $p->metaPos($t, $p->length()), 3) : 'NA';
		print "p_length:". $p->length."\n" if defined $p;
		print "t_length:".$t->length."\n";
		print "stop_codon: $stop_codon\n";


		print "translation_offset:$translation_offset\n";
                my $start_codon = defined($p) ? $p->triplet($t, 0) : 'NA';
		print "start_codon:$start_codon\n";
                my $splice_j;
                my $pos_of_splice_in_p;

                if (defined($p) && defined($t->spliceJunction(2))){
                        $splice_j           = $t->spliceJunction(2);
                        $pos_of_splice_in_p = $t->metaPos($p, $splice_j);
                        $pos_of_splice_in_p = 'not defined'
                        unless defined($pos_of_splice_in_p);
                }
                else {
                        $splice_j =  'not defined';
                        $pos_of_splice_in_p = 'not defined';
                }

                print "\ttranscript name:".$t->name."\n";
                print "\t\ttranscript_nbeg:".$t->nbeg."\n";
                print "\t\ttranscript_nend:".$t->nend."\n";
                print "\t\tprotein name:".$p->name."\n" if defined($p);
                print "\t\ttranslation_offset:$translation_offset\n";
                print "\t\tstart_codon:$start_codon\n";
                print "\t\tpos on t of 2nd splice junction:$splice_j\n";
                print "\t\tpos on p of 2nd splice junction:$pos_of_splice_in_p\n";

		my $j = 0;
		while (my $e = $t->exon($j)){

			my $intron = $t->intron($j);
			print "\t\tintron id:".$intron->id()."\n"
			if defined($intron);
			print "\t\tintron src_id:".$intron->src_id()."\n"
			if defined($intron);


			my $pos_e_b_in_t = $e->metaPos($t, 0);
                        my $pos_e_e_in_t = $e->metaPos($t, $e->length);

			#gh: 
                        my $splice_acceptor = $t->acceptor($j, 5, 5);
                           $splice_acceptor = 'not defined'
                           unless defined($splice_acceptor);

                        my $splice_donor = $t->donor($j, 5, 5);
                           $splice_donor = 'not defined'
                           unless defined($splice_donor);

                        my $pos_e_b_in_p;
                        my $pos_e_e_in_p;
                        my $aa;
                        my $codon;
                        if (defined($p)) {
				if (defined($t->metaPos($p, $pos_e_b_in_t))){
					$pos_e_b_in_p = $t->metaPos($p, $pos_e_b_in_t);
					
					$aa           = $p->aa($pos_e_b_in_p);
					$codon        =  $p->triplet($t, int($pos_e_b_in_p));
				}
				else {
					$pos_e_b_in_p =  'not defined';
					$aa           =  'not defined';
					$codon        =  'not defined';
				}
				if (defined($t->metaPos($p, $pos_e_e_in_t))) {
					$pos_e_e_in_p = $t->metaPos($p, $pos_e_e_in_t);				
				}
				else {
					$pos_e_e_in_p =  'not defined';
				}
			}

			print "\t\t\texon\($j\) type:".$e->type."\n";
                        print "\t\t\texon\($j\) id:".$e->id."\n";
			print "\t\t\texon\($j\) src_id:".$e->src_id."\n";
                        print "\t\t\texon\($j\) isCoding:".$e->isCoding($p, $t)."\n" if defined($p);
                        print "\t\t\texon\($j\) isFirstExon:".$t->isFirstExon($e)."\n";
                        print "\t\t\texon\($j\) isLastExon:".$t->isLastExon($e)."\n";
                        print "\t\t\texon\($j\) splice_acceptor:$splice_acceptor\n";
                        print "\t\t\texon\($j\) splice_donor   :$splice_donor\n";
                        print "\t\t\texon\($j\) nbeg:".$e->nbeg."\n";
                        print "\t\t\texon\($j\) nend:".$e->nend."\n";
                        print "\t\t\texon\($j\) beg in t:$pos_e_b_in_t\n";
                        print "\t\t\texon\($j\) end in t:$pos_e_e_in_t\n";
                        print "\t\t\texon\($j\) beg in p:$pos_e_b_in_p\n";
                        print "\t\t\texon\($j\) end in p:$pos_e_e_in_p\n";
                        print "\t\t\texon\($j\) aa \@ beg in p:$aa\n";
                        print "\t\t\texon\($j\)codon \@ beg in t:$codon\n";
                        print "\n";
                        $j++;

		}
		$i++;
	}
} 

#-----------------------------------------------------------------------------
#---------------------------------- SUBS -------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
sub gotControlC {

	die "died in cgl_tutorial_2::gotContolC\n";
}
#-----------------------------------------------------------------------------

__END__

=head1 NAME

  cgl_tutorial

=head1 SYNOPSIS

cgl_tutorial <chaos.xml file>

cgl_tutorial CG33070.chaos.xml

=head1 DESCRIPTION

A tutorial for the cgl library.

=head1 DOCUMENTATION

L<http://www.yandell-lab.org/cgl>

=cut


