#!/usr/bin/perl
use strict;
use warnings;

use CGL::Annotation;
use Getopt::Long;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

This script takes a master_datastore.index file and compares residues from 
different places on the all transcripts and the corresponding locations on the
contigs.

EXAMPLES:

transform_coordinates master_datastore.index

";

my $ds_index_file = shift;

die $usage if ! $ds_index_file;

my @ds_index = parse_ds_index($ds_index_file);

for my $gene_data (@ds_index) {
	my $gene_name = $$gene_data{gene_name};
	my $file_name = $$gene_data{file};
	
	my $cgl = CGL::Annotation->new($file_name);
	my $focus = $cgl->meta_data('focus_feature_id')
	    || 'no focus given in file';

	my $contig = $cgl->contig(0);
	my $contig_id = $contig->id;

	my $iterator = new CGL::Annotation::Iterator($cgl);

	while (my $gene = $iterator->next_by_gene()){
		next if ($gene->id ne $focus);
		
		my $i = 0;
		while (my $transcript = $gene->transcript($i++)) {

			my $id = $transcript->id;
			
			my $c_strand = $contig->strand;
			my $t_strand = $transcript->strand;

			#Transcript start and end
			my $t_start = 10; #$data->{$id}{start};
			my $t_end   = length($transcript->residues) - 10; #$data->{$id}{end};

			$t_start--;
			$t_end--;

			#Grab first 10 and last 10 nts from transcript
			my $t_sub_s = substr($transcript->residues, $t_start  , 10);
			my $t_sub_e = substr($transcript->residues, $t_end  - 9, 10);

			#Get contig start and end coresponding to transcript start and end
			my $c_start = $transcript->metaPos($contig, $t_start);
			my $c_end   = $transcript->metaPos($contig, $t_end);

			$c_start--;
			$c_end--;

			#Get first 10 and last 10 nts from contig coordinates
			my ($c_sub_s, $c_sub_e);
			if ($transcript->strand() == 1){
				$c_sub_s = substr($contig->residues    , $c_start, 10);
				$c_sub_e = substr($contig->residues    , $c_end -9, 10);
			}
			else {
				$c_sub_s = substr($contig->residues    , $c_start -9, 10);
				$c_sub_e = substr($contig->residues    , $c_end, 10);
			}
			my $strand = $transcript->strand();
			
			my $c_start_b = $c_start;
			my $c_end_b   = $c_end;
			
			if ( $t_strand != $c_strand) {
				$t_sub_s =~ tr /ATCG/TAGC/;
				$t_sub_s = reverse $t_sub_s;
				$t_sub_e =~ tr /ATCG/TAGC/;
				$t_sub_e = reverse $t_sub_e;
			}
			if ($t_sub_s ne $c_sub_s or $t_sub_e ne $c_sub_e) {
				print "DANGER WILL ROBINSON!!!\n";
				print "$id\n$t_sub_s\n$c_sub_s\n$t_sub_e\n$c_sub_e\n\n";
				
				print join "\n", ("T_ID: $id",
						  "C_ID: $contig_id", 
						  "T_Start: $t_start", 
						  "T_End: $t_end", 
						  "C_Start: $c_start_b", 
						  "C_End: $c_end_b",
						  "t_strand: $t_strand",
						  "c_strand: $c_strand",
						  "t_sub_s: $t_sub_s",
						  "c_sub_s: $c_sub_s",
						  "t_sub_e: $t_sub_e",
						  "c_sub_e: $c_sub_e");
				
				print "\n\n";
			}
		}	
	}
}
#-----------------------------------------------------------------------------
#------------------------------- SUBROUTINES ---------------------------------
#-----------------------------------------------------------------------------
sub parse_ds_index {
        my $ds_index_file = shift;

        open(DS_IN,  $ds_index_file) or die "Can't open DS_IN: $ds_index_file";

        my @genes;
        while (<DS_IN>) {
                chomp;
                my ($valid, $gene_name, $synonym, $file) = split /\t/, $_;
                next unless $valid eq 'DOC_VALID';
                push @genes, {gene_name => $gene_name,
                              file      => $file};
        }
        return @genes;
}
