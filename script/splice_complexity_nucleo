#!/usr/bin/perl -w 
use strict;

use FileHandle;
use Shadower;
use Getopt::Long;

my $usage = '

Synopsis:
splice_complexity_nucleo --format gff3_flybase --gff gff3_file \
                         --fasta fasta_file

splice_complexity_nucleo --format chaos --chaos chaos_file

Description:

This script will take a gff3/fasta file pair or a chaos XML file and
will calculate the splice complexity of all genes represented in the input
file(s).  The scoring algorithm will only use all nucleotides to calculate the
complexity.  If a chaos file is given, then --format, --gff and --fasta
options are not needed.

Options:
  --format Annotation format (gff3_flybase, gff3_wormbase, gff3_maker etc.)
  --gff    The name of the GFF3 file.
  --fasta  The name of the fasta file.
  --chaos  The name of the chaos file.

Output is the following columns:

gene_id  Gene ID
num_t    Number of transcripts
num_t_p  Number of transcripts pairs
esc_m    Exon splice complexity of the entire mRNA
esc_m_x  
esc_c    Exon splice complexity of the CDS
esc_c_x  
esc_u    Exon splice complexity of the UTRs
esc_u_x  
esc_5    Exon splice complexity of the 5 UTR
esc_5_x  
esc_3    Exon splice complexity of the 3 UTR
esc_3_x  
isc_m    Intron splice complexity of the entire mRNA
isc_m_x  
isc_c    Intron splice complexity of the CDS
isc_c_x  
isc_5    Intron splice complexity of the 5 UTR
isc_5_x  
isc_3    Intron splice complexity of the 3 UTR
isc_3_x  

my ($gene_id, $num_t, $num_t_p, $esc_m_x, $esc_m, $esc_c_x, $esc_c, $esc_u_x, 
    $esc_u, $esc_5_x, $esc_5, $esc_3_x, $esc_3, $isc_m_x, $isc_m, $isc_c_x, 
    $isc_c, $isc_5_x, $isc_5, $isc_3_x, $isc_3) = split;

';

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my ($gff_file, $fasta_file, $chaos_file, $format);

my $opt_success = GetOptions('gff=s'   	 => \$gff_file,
                             'fasta=s' 	 => \$fasta_file,
                             'chaos=s' 	 => \$chaos_file,
                             'format=s'  => \$format,
                             );

my $cgl = CGL::Annotation->new(format     => $format,
			       gff_file   => $gff_file,
			       fasta_file => $fasta_file,
			       chaos_file => $chaos_file,
			       );

my $iterator = CGL::Annotation::Iterator->new($cgl);

my $c = $cgl->contig(0);

while (my $g = $iterator->next_by_gene()){

	my $num_t = num_transcripts($g);

	next unless $num_t > 1;

	my $num_p = get_number_pairs($num_t);

        print $g->id()."\t".$num_t."\t".$num_p;

	splice_complexity($g, $c, 'mRNAs');
	splice_complexity($g, $c, 'CDSs');
	splice_complexity($g, $c, 'utrs');
        splice_complexity($g, $c, 'utr5');
        splice_complexity($g, $c, 'utr3');
	splice_complexity($g, $c, 'int_m');
        splice_complexity($g, $c, 'int_c');
        splice_complexity($g, $c, 'int_5');
        splice_complexity($g, $c, 'int_3');
	print "\n";

}

#-----------------------------------------------------------------------------
#------------------------------------ SUBS -----------------------------------
#-----------------------------------------------------------------------------
sub num_transcripts {
	my $g = shift;

        my $i = 0;
        while (my $t = $g->transcript($i)){
		$i++;
	}
	return $i;
}
#-----------------------------------------------------------------------------
sub get_number_pairs {
	my $num_t = shift;

	return 1 if $num_t == 2;

	my $n_fac         = factoral($num_t);
	my $n_minus_k_fac = factoral($num_t - 2);
	my $k_fac         = 2;

	my $num_pairs = $n_fac/($n_minus_k_fac*$k_fac);

	return $num_pairs;
}
#-----------------------------------------------------------------------------
sub factoral {
	my $n = shift;

	my $fac = $n;
	for (my $i = $n -1; $i > 0; $i--){
		$fac = $fac*$i;
	}
	return $fac;
}
#-----------------------------------------------------------------------------
sub get_key_pairs {
	my $hash = shift;

	my @pairs;
	foreach my $i (keys %{$hash}){
		foreach my $j (keys %{$hash->{$i}}){
			push (@pairs, [$i, $j]);
		}
	}
	return \@pairs;
}
#-----------------------------------------------------------------------------
sub get_length {
        my $pairs = shift;

        my $length = 0;
        foreach my $p (@{$pairs}){
                $length += abs($p->[0] - $p->[1])
                unless $p->[0] eq 'undef';
        }
        return $length;
}
#-----------------------------------------------------------------------------
sub splice_complexity {
	my $g = shift;
	my $c = shift;
	my $type = shift;

	my $data;
	if ($type eq 'mRNAs'){
		$data = get_mRNA_data($g);
	}
	elsif ($type eq 'CDSs'){
		$data = get_CDS_data($g, $c);
	}
        elsif ($type eq 'utrs'){
                $data = get_utr_data($g, $c);
        }
        elsif ($type eq 'utr5'){
                $data = get_utr5_data($g, $c);
        }
        elsif ($type eq 'utr3'){
                $data = get_utr3_data($g, $c);
        }
        elsif ($type eq 'int_m'){
                $data = get_int_m_data($g, $c);
        }
        elsif ($type eq 'int_c'){
                $data = get_int_c_data($g, $c);
        }
        elsif ($type eq 'int_5'){
                $data = get_int_5_data($g, $c);
        }
        elsif ($type eq 'int_3'){
                $data = get_int_3_data($g, $c);
        }
	else {
		die "unkown type!\n";
	}

	my %common;
	my $num_transcripts = num_transcripts($g);
	my $num_pairs       = get_number_pairs($num_transcripts);

	my @keys = sort keys %{$data};
	my %seen;
	my $total = 0;
	my $total_length = 0;

	foreach my $i (@keys) {
		my $pairs_i = get_key_pairs($data->{$i});
		$total_length += get_length($pairs_i);
		foreach my $j (@keys) {

			next if $i == $j;

			next if ($seen{$i}{$j} || $seen{$j}{$j});

			my $pairs_j = get_key_pairs($data->{$j}); 

			$total += get_acc($pairs_i, $pairs_j, $c);

			$seen{$i}{$j}++;
			$seen{$j}{$i}++;
		}
	}

	my $sc = 1 - ($total/$num_pairs);

        $sc = sprintf("%.5f", $sc);

        print "\t($total_length) $sc";
}
#-----------------------------------------------------------------------------
sub get_coors {
	my $pairs = shift;
	
	my @coors;
	foreach my $p (@{$pairs}){
		push(@coors, $p) unless $p->[0] eq 'undef';
	}
	return \@coors;
}
#-----------------------------------------------------------------------------
sub get_span {
	my $i_coors = shift;
	my $j_coors = shift;

	my @total;
	foreach my $p (@{$i_coors}){
		push(@total, $p->[0]);
		push(@total, $p->[1]);
	}
        foreach my $p (@{$j_coors}){
                push(@total, $p->[0]);
                push(@total, $p->[1]);
        }

	my @sorted = sort {$a <=> $b} @total;

	my $alpha = shift(@sorted);
	my $omega = pop(@sorted);

	return ($alpha, $omega);
	
}
#-----------------------------------------------------------------------------
sub get_acc {
	my $pairs_i = shift;
	my $pairs_j = shift;
	my $c       = shift;

	my $coors_i = get_coors($pairs_i);
	my $coors_j = get_coors($pairs_j);
		
	my ($alpha, $omega) = get_span($coors_i, $coors_j);
  
	return 1 if !defined($coors_i->[0]) && !defined($coors_j->[0]);

	my $seq = $c->residues();

        my $i_masked_seq = Shadower::maskSequence(\$seq, $coors_i, 0, '1');
        my $j_masked_seq = Shadower::maskSequence(\$seq, $coors_j, 0, '1');

        $$i_masked_seq =~ s/[^1]/0/g;
        $$j_masked_seq =~ s/[^1]/0/g;

        my $tp = 0;
        my $tn = 0;
        my $fp = 0;
        my $fn = 0;
        for (my $i = $alpha; $i < $omega - 1; $i++) {
                my $i_b = substr($$i_masked_seq, $i, 1);
                my $j_b = substr($$j_masked_seq, $i, 1);

                if    ($i_b == 1 && $j_b == 1){
                        $tp++;
                }
                elsif ($i_b == 0 && $j_b == 0){
                        $tn++;
                }
                elsif ($i_b == 1 && $j_b == 0){
                        $fn++;
                }
                elsif ($i_b == 0 && $j_b == 1){
                        $fp++;
                }

        }
	my $sn_d = $tp + $fn;
        my $sp_d = $tp + $fp;

        my $sn = $sn_d == 0 ? 0 : $tp/($tp + $fn);
        my $sp = $sp_d == 0 ? 0 : $tp/($tp + $fp);
        my $ac = ($sn + $sp)/2;


	return $ac;
}
#-----------------------------------------------------------------------------
sub get_mRNA_data {
	my $g = shift;

	my %mRNAs;

	my $i = 0;
	while (my $t = $g->transcript($i)){
		my $j = 0;
		while (my $e = $t->exon($j)){
			$mRNAs{$i}{$e->nbeg()}{$e->nend}++;
			$j++;
		}
                $mRNAs{$i}{'undef'}{'undef'}++ 
                if !defined($mRNAs{$i});


		$i++;
	}

	return \%mRNAs;
}
#-----------------------------------------------------------------------------
sub get_int_m_data {
        my $g = shift;

        my %introns;

        my $i = 0;
        while (my $t = $g->transcript($i)){
                my $j = 0;
                while (my $int = $t->intron($j)){
                        $introns{$i}{$int->nbeg()}{$int->nend}++;
                        $j++;
                }
                $introns{$i}{'undef'}{'undef'}++ 
                if !defined($introns{$i});
                $i++;
        }

        return \%introns;
}
#-----------------------------------------------------------------------------
sub get_int_c_data {
        my $g = shift;

        my %introns;

        my $i = 0;
        while (my $t = $g->transcript($i)){
		my $p = $t->translation(0);

                if (!defined($p)){
                        $introns{$i}{'undef'}{'undef'}++;
                        $i++;
                        next;
                }

                my $j = 0;
                while (my $int = $t->intron($j)){
			my $up_e = $t->exon($j);
			my $dn_e = $t->exon($j + 1);

                        my $dn_e_b_on_t = $dn_e->metaPos($t, 0);
                        my $dn_e_b_on_p = $t->metaPos($p, $dn_e_b_on_t);

                        my $up_e_e_on_t = $up_e->metaPos($t, length($up_e->residues));
                        my $up_e_e_on_p = $t->metaPos($p, $up_e_e_on_t);

			if (defined($up_e_e_on_p) && defined($dn_e_b_on_p)){
                        	$introns{$i}{$int->nbeg()}{$int->nend}++;
			}
                        $j++;
                }
                $introns{$i}{'undef'}{'undef'}++ 
                if !defined($introns{$i});

                $i++;
        }

        return \%introns;
}
#-----------------------------------------------------------------------------
sub get_int_5_data {
        my $g = shift;

        my %introns;

        my $i = 0;
        while (my $t = $g->transcript($i)){
                my $p = $t->translation(0);

                if (!defined($p)){
                        $introns{$i}{'undef'}{'undef'}++;
                        $i++;
                        next;
                }

                my $p_b_on_t = $p->metaPos($t, 0);
                my $p_e_on_t = $p->metaPos($t, length($p->residues));

                my $j = 0;
                while (my $int = $t->intron($j)){
                        my $up_e = $t->exon($j);
                        my $dn_e = $t->exon($j + 1);

                        my $dn_e_b_on_t = $dn_e->metaPos($t, 0);
                        my $dn_e_b_on_p = $t->metaPos($p, $dn_e_b_on_t);

                        my $up_e_e_on_t = $up_e->metaPos($t, length($up_e->residues));
                        my $up_e_e_on_p = $t->metaPos($p, $up_e_e_on_t);

                        if    (defined($up_e_e_on_p) && defined($dn_e_b_on_p)){
				# intron is in CDS 
                        }
			elsif ($dn_e_b_on_t < $p_b_on_t){
				# 5-prime intron utr 
                                $introns{$i}{$int->nbeg()}{$int->nend}++;
			}
                        elsif ($up_e_e_on_t >  $p_e_on_t){
                                # 3-prime intron in utr 
                        }
                        $j++;

                }
                $introns{$i}{'undef'}{'undef'}++ 
		if !defined($introns{$i});

                $i++;
        }

        return \%introns;
}
#-----------------------------------------------------------------------------
sub get_int_3_data {
        my $g = shift;

        my %introns;

        my $i = 0;
        while (my $t = $g->transcript($i)){
                my $p = $t->translation(0);
                if (!defined($p)){
                        $introns{$i}{'undef'}{'undef'}++;
                        $i++;
                        next;
                }

                my $p_b_on_t = $p->metaPos($t, 0);
                my $p_e_on_t = $p->metaPos($t, length($p->residues));

                my $j = 0;
                while (my $int = $t->intron($j)){
                        my $up_e = $t->exon($j);
                        my $dn_e = $t->exon($j + 1);

                        my $dn_e_b_on_t = $dn_e->metaPos($t, 0);
                        my $dn_e_b_on_p = $t->metaPos($p, $dn_e_b_on_t);

                        my $up_e_e_on_t = $up_e->metaPos($t, length($up_e->residues));
                        my $up_e_e_on_p = $t->metaPos($p, $up_e_e_on_t);

                        if    (defined($up_e_e_on_p) && defined($dn_e_b_on_p)){
                                # intron is in CDS
                        }
                        elsif ($dn_e_b_on_t < $p_b_on_t){
                                # 5-prime intron utr
                        }
                        elsif ($up_e_e_on_t >  $p_e_on_t){
                                # 3-prime intron in utr
				$introns{$i}{$int->nbeg()}{$int->nend}++;
                        }
                        $j++;
                }
                $introns{$i}{'undef'}{'undef'}++ 
                if !defined($introns{$i});

                $i++;
        }

        return \%introns;
}
#-----------------------------------------------------------------------------
sub get_utr3_data {
        my $g = shift;

        my %utrs;

        my $i = 0;
        while (my $t = $g->transcript($i)){

                my $p = $t->translation(0);
                if (!defined($p)){
                        $utrs{$i}{'undef'}{'undef'}++;
                        $i++;
                        next;
                }


                my $p_b_on_t = $p->metaPos($t, 0);
                my $p_e_on_t = $p->metaPos($t, length($p->residues));

                my $p_b_on_c = $t->metaPos($c, $p_b_on_t);
                my $p_e_on_c = $t->metaPos($c, $p_e_on_t);

                my $j = 0;
                while (my $e = $t->exon($j)){
                        my $e_b_on_t = $e->metaPos($t, 0);
                        my $e_b_on_p = $t->metaPos($p, $e_b_on_t);

                        my $e_e_on_t = $e->metaPos($t, length($e->residues));
                        my $e_e_on_p = $t->metaPos($p, $e_e_on_t);
                        if (defined($e_b_on_p) && defined($e_e_on_p)){
                                #completely coding
                        }
                        elsif (!defined($e_b_on_p) && defined($e_e_on_p)){
                                # 5-prime partial coding
                        }
                        elsif (defined($e_b_on_p) && !defined($e_e_on_p)){
                                # 3-prime partial coding
                                $utrs{$i}{$p_e_on_c}{$e->nend}++;
                        }
                        elsif ($e_e_on_t < $p_b_on_t){
                                # totally 5-prime UTR
                        }
                        elsif ($e_b_on_t > $p_e_on_t){
                                # totally 3-prime UTR
                                $utrs{$i}{$e->nbeg()}{$e->nend}++;
                        }
                        elsif ($e_b_on_t < $p_b_on_t && $e_e_on_t > $p_e_on_t){
                                #  single exon gene w 5 & 3 prime UTR
                                $utrs{$i}{$p_e_on_c}{$e->nend}++;
                        }
                        else {
                                die "logic error in get_utr3_data!\n";
                        }

                        $j++;
                }
                $utrs{$i}{'undef'}{'undef'}++ 
                if !defined($utrs{$i});
                $i++;
        }

        return \%utrs;
}
#-----------------------------------------------------------------------------
sub get_utr5_data {
        my $g = shift;

        my %utrs;

        my $i = 0;
        while (my $t = $g->transcript($i)){

                my $p = $t->translation(0);
                if (!defined($p)){
                        $utrs{$i}{'undef'}{'undef'}++;
                        $i++;
                        next;
                }

                my $p_b_on_t = $p->metaPos($t, 0);
                my $p_e_on_t = $p->metaPos($t, length($p->residues));

                my $p_b_on_c = $t->metaPos($c, $p_b_on_t);
                my $p_e_on_c = $t->metaPos($c, $p_e_on_t);

                my $j = 0;
                while (my $e = $t->exon($j)){

                        my $e_b_on_t = $e->metaPos($t, 0);
                        my $e_b_on_p = $t->metaPos($p, $e_b_on_t);

                        my $e_e_on_t = $e->metaPos($t, length($e->residues));
                        my $e_e_on_p = $t->metaPos($p, $e_e_on_t);
                        if (defined($e_b_on_p) && defined($e_e_on_p)){
                                #completely coding
                        }
                        elsif (!defined($e_b_on_p) && defined($e_e_on_p)){
                                # 5-prime partial coding
                                $utrs{$i}{$e->nbeg}{$p_b_on_c}++;
                        }
                        elsif (defined($e_b_on_p) && !defined($e_e_on_p)){
                                # 3-prime partial coding
                        }
                        elsif ($e_e_on_t < $p_b_on_t){
                                # totally 5-prime UTR
                                $utrs{$i}{$e->nbeg()}{$e->nend}++;
                        }
                        elsif ($e_b_on_t > $p_e_on_t){
                                # totally 3-prime UTR
                        }
                        elsif ($e_b_on_t < $p_b_on_t && $e_e_on_t > $p_e_on_t){
                                #  single exon gene w 5 & 3 prime UTR
                                $utrs{$i}{$e->nbeg()}{$p_b_on_c}++;
                        }
                        else {
                                die "logic error in get_utr5_data!\n";
                        }

                        $j++;
                }
                $utrs{$i}{'undef'}{'undef'}++ 
                if !defined($utrs{$i});

                $i++;
        }
        return \%utrs;
}
#-----------------------------------------------------------------------------
sub get_utr_data {
        my $g = shift;

        my %utrs;

        my $i = 0;
        while (my $t = $g->transcript($i)){

                my $p = $t->translation(0);
                if (!defined($p)){
                        $utrs{$i}{'undef'}{'undef'}++;
                        $i++;
                        next;
                }


                my $p_b_on_t = $p->metaPos($t, 0);
                my $p_e_on_t = $p->metaPos($t, length($p->residues));

                my $p_b_on_c = $t->metaPos($c, $p_b_on_t);
                my $p_e_on_c = $t->metaPos($c, $p_e_on_t);

                my $j = 0;
                while (my $e = $t->exon($j)){
			
                        my $e_b_on_t = $e->metaPos($t, 0);
                        my $e_b_on_p = $t->metaPos($p, $e_b_on_t);

                        my $e_e_on_t = $e->metaPos($t, length($e->residues));
                        my $e_e_on_p = $t->metaPos($p, $e_e_on_t);
			if (defined($e_b_on_p) && defined($e_e_on_p)){
				#completely coding
			}
			elsif (!defined($e_b_on_p) && defined($e_e_on_p)){
				# 5-prime partial coding
                                $utrs{$i}{$e->nbeg}{$p_b_on_c}++;
			}
			elsif (defined($e_b_on_p) && !defined($e_e_on_p)){
				# 3-prime partial coding
                                $utrs{$i}{$p_e_on_c}{$e->nend}++;

			}
                        elsif ($e_e_on_t < $p_b_on_t){
                                # totally 5-prime UTR
                                $utrs{$i}{$e->nbeg()}{$e->nend}++;
                        }
                        elsif ($e_b_on_t > $p_e_on_t){
                                # totally 3-prime UTR
                                $utrs{$i}{$e->nbeg()}{$e->nend}++;
                        }
                        elsif ($e_b_on_t < $p_b_on_t && $e_e_on_t > $p_e_on_t){
                                #  single exon gene w 5 & 3 prime UTR 
                                $utrs{$i}{$e->nbeg()}{$p_b_on_c}++;

                                $utrs{$i}{$p_e_on_c}{$e->nend}++;
                        }
			else {
				die "logic error in get_utr_data!\n";
			}

                        $j++;
                }
                $utrs{$i}{'undef'}{'undef'}++ 
                if !defined($utrs{$i});
                $i++;
        }

        return \%utrs;
}
#-----------------------------------------------------------------------------
sub get_CDS_data {
        my $g = shift;
	my $c = shift;

        my %CDSs;

	my $not_included = 0;
        my $i = 0;
        while (my $t = $g->transcript($i)){
		my $p = $t->translation(0);
                if (!defined($p)){
                        $CDSs{$i}{'undef'}{'undef'}++;
                        $i++;
                        next;
                }


		my $p_b_on_t = $p->metaPos($t, 0);
		my $p_e_on_t = $p->metaPos($t, length($p->residues));
		
		my $p_b_on_c = $t->metaPos($c, $p_b_on_t);
		my $p_e_on_c = $t->metaPos($c, $p_e_on_t);

                my $num_exons = @{$t->exons};
                if ($num_exons == 1){
                        my $e = $t->exon(0);
                        my $e_b_on_t = $e->metaPos($t, 0);
                        my $e_b_on_p = $t->metaPos($p, $e_b_on_t);

                        my $e_e_on_t = $e->metaPos($t, length($e->residues));
                        my $e_e_on_p = $t->metaPos($p, $e_e_on_t);

                        my $nbeg = $e->nbeg();
                        my $nend = $e->nend();
                        if (defined($e_b_on_p) && defined($e_e_on_p)){
                                $CDSs{$i}{$nbeg}{$nend}++;
                        }
                        else {
                                $CDSs{$i}{$p_b_on_c}{$p_e_on_c}++;
                        }
                        $i++;
                        next;
                }
                my $j = 0;
                while (my $e = $t->exon($j)){
               		my $nbeg = $e->nbeg();
                	my $nend = $e->nend();

                	my $e_b_on_t = $e->metaPos($t, 0);
                	my $e_b_on_p = $t->metaPos($p, $e_b_on_t);

                	my $e_e_on_t = $e->metaPos($t, length($e->residues));
                	my $e_e_on_p = $t->metaPos($p, $e_e_on_t);

                        if    ($e_e_on_t < $p_b_on_t){
                                # 5-prime entirely-utr exon
                        }
                        elsif ($e_b_on_t > $p_e_on_t){
                                # 3-prime entirely-utr exon
                        }
                        elsif ($e_b_on_t >= $p_b_on_t && $e_e_on_t <= $p_e_on_t){
                                # entirely coding exon 
                                $CDSs{$i}{$nbeg}{$nend}++;
                        }
                        elsif ($e_b_on_t < $p_b_on_t && $e_e_on_t <= $p_e_on_t){
                                # 5-prime portion of exon is UTR
                                $CDSs{$i}{$p_b_on_c}{$nend}++;
                        }
                        elsif ($p_b_on_t >= $e_b_on_t && $p_e_on_t <= $e_e_on_t ){
                                # entire internal portion of exon is coding
                                $CDSs{$i}{$p_b_on_c}{$p_e_on_c}++;
                        }
                        elsif ($e_b_on_t <= $p_e_on_t &&  $e_e_on_t > $p_e_on_t ){
                                # 3-prime portion of exon is UTR
                                $CDSs{$i}{$nbeg}{$p_e_on_c}++;
                        }
                        else {
                                die "logic error in get_CDS_data!\n";
                        }

                        $j++;
                }
                $CDSs{$i}{'undef'}{'undef'}++ 
                if !defined($CDSs{$i});
                $i++;
        }

        return \%CDSs;
}
#-----------------------------------------------------------------------------
sub slice_complexity_nucl {
        my $g = shift;
        my $c = shift;

	return 0;
}
#-----------------------------------------------------------------------------

