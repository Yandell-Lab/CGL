#!/usr/bin/perl
use strict;
use warnings;

use lib "$ENV{CGL_GFF_LIB}";

use CGL::Annotation;
use Getopt::Long;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

transform_coordinates -gff_file <gff_file> -fasta_file <fasta_file> \
		      transcript_id coordinate coordinate
transform_coordinates -gff_file <gff_file> -fasta_file <fasta_file> \
		      -data_file <id_coordinate_file>

Description:

This script takes a gff file, a fasta file, and either a data file described
below, or three values.  The first value is a transcript id, the second
value is a coordinate on that transcript and the third value is also a
coordinate on that transcript.  The script returns the transcript_id, a contig
id, and two contig coordinates that correspond to the transcript coordinates
delimited by tabs.

A data file may be given.  This file must be a tab delimited file with three
columns.  The three columns are the same as arguments to the command line.  A
transcript id, and two coordinates.


";

my ($format, $gff_file, $fasta_file, $data_file);

GetOptions ('$format=s'    => \$format
	    "gff_file=s"   => \$gff_file,
	    "fasta_file=s" => \$fasta_file,
	    "data_file=s"  => \$data_file);

my ($id, $start, $end) = @ARGV;

die $usage if ! (($id && $start && $end) || $data_file);

#Get data from a file, from the command line or die.
my $data;
$data_file
    ? $data = get_data($data_file)         : ($id && $start && $end)
    ? $data = {$id => {start => $start,
		       end   => $end}}     : die $usage;

#Get a list of the ids
my @ids  = keys %{$data};

#Build a CGL object for the given ids
my $cgl = CGL::Annotation->new(format     => $format,
			       gff_file   => $gff_file,
			       fasta_file => $fasta_file,
			       \@ids);

#Get Contig details
my $contig = $cgl->contig(0);
my $contig_id = $contig->id;

#Grab all the genes
my $genes = $cgl->genes;

#Build a hash of all transcript ids and the associated transcript
#objects.
my %trnsc_hash;
for my $gene (@{$genes}) {
	my $transcripts = $gene->transcripts;
	for my $transcript (@{$transcripts}) {
		my $transcript_id = $transcript->id;
		$trnsc_hash{$transcript_id} = $transcript;
	}
}

#For all id, coordinate sets get and print the contig id and coordinates.
for my $id (@ids) {
	my $transcript = $trnsc_hash{$id};

	my $t_start = $data->{$id}{start};
	my $t_end   = $data->{$id}{end};

	#Grab first 10 and last 10 nts from transcript
	my $t_sub_s = substr($transcript->residues, $t_start    , 10);
	my $t_sub_e = substr($transcript->residues, $t_end      , 10);

	#Get contig start and end coresponding to transcript start and end
	my $c_start = $transcript->metaPos($contig, $t_start);
	my $c_end   = $transcript->metaPos($contig, $t_end);

	print join "\t", ($id,
			  $contig_id,
			  $c_start,
			  $c_end,
			  );
	print "\n";

}

#-----------------------------------------------------------------------------
#------------------------------- SUBROUTINES ---------------------------------
#-----------------------------------------------------------------------------
#Read the data file.
sub get_data {
	my $id_file = shift;
	open (IN, $id_file) or die "Can't open $id_file\n";

	my %data;
	while (<IN>) {
		my ($id, $start, $end) = split;
		$data{$id}{start} = $start;
		$data{$id}{end}   = $end;
	}

	close IN;

	return \%data;
}
