.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Search::HSP::PhatHSP::blastn 3"
.TH Bio::Search::HSP::PhatHSP::blastn 3 "2004-10-05" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "Bio::Search::HSP::PhatHSP::blastn"
.IX Header "Bio::Search::HSP::PhatHSP::blastn"
Bio::Search::HSP::PhatHSP::blastn \- The platonic ideal of a \s-1CGL\s0 module.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& my $hsp = $hsps->[0];          # $hsps is filled in by test harness
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Stub documentation for this module was created by
ExtUtils::ModuleMaker.  And, then it was poked, prodded, and otherwise
massaged into it's current form by George.
.PP
Hopefully the module author wasn't negligent enough to leave the stub
unedited.
.PP
Blah blah blah.
.SH "USAGE"
.IX Header "USAGE"
Expand on the examples from the \s-1SYNOPSIS\s0.
.SH "BUGS"
.IX Header "BUGS"
Not yet.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\& Mark Yandell
\& myandell@fruitfly.org
\& http://www.yandell-lab.org
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
List other relevant resources.
.SH "FUNCTION/METHOD DOCUMENTATION"
.IX Header "FUNCTION/METHOD DOCUMENTATION"
The rest of this document describes the {class,package}'s methods and
subroutines.  Private methods are usually preceded with an underscore
(_) and should not be considered part of the supported interface (they
may change without warning).
.Sh "new"
.IX Subsection "new"
.Vb 1
\& Usage     : How to use this function/method
.Ve
.PP
.Vb 1
\& my $hsp = $hsps->[0];          # $hsps is filled in by test harness
.Ve
.PP
.Vb 7
\& Purpose   : What the subroutine does.
\& Returns   : The types and values it returns.
\& Argument  : Required and optional input.
\& Throws    : Exceptions and other anomolies
\& Comments  : This is a sample subroutine header.
\&           : It is polite to include more pod and fewer comments.
\& See Also  : Other things that might be useful.
.Ve
.Sh "whatIsThere"
.IX Subsection "whatIsThere"
.Vb 1
\& Usage     : How to use this function/method
.Ve
.PP
.Vb 3
\& my $hsp = $hsps->[0];          # $hsps is filled in by test harness
\& my $q_char = $hsp->whatIsThere('query', 23); # the first match starts here
\& my $h_char = $hsp->whatIsThere('hit', 16827); # ditto in subject
.Ve
.PP
.Vb 2
\& my $q_gap = $hsp->whatIsThere('query', 38); # there's a query gap here
\& my $h_gap = $hsp->whatIsThere('hit', 16847);
.Ve
.PP
.Vb 7
\& Purpose   : What the subroutine does.
\& Returns   : The types and values it returns.
\& Argument  : Required and optional input.
\& Throws    : Exceptions and other anomolies
\& Comments  : This is a sample subroutine header.
\&           : It is polite to include more pod and fewer comments.
\& See Also  : Other things that might be useful.
.Ve
.Sh "debug_show"
.IX Subsection "debug_show"
.Vb 1
\& Usage     : How to use this function/method
.Ve
.PP
.Vb 7
\& Purpose   : What the subroutine does.
\& Returns   : The types and values it returns.
\& Argument  : Required and optional input.
\& Throws    : Exceptions and other anomolies
\& Comments  : This is a sample subroutine header.
\&           : It is polite to include more pod and fewer comments.
\& See Also  : Other things that might be useful.
.Ve
.Sh "name"
.IX Subsection "name"
.Vb 1
\& Usage     : How to use this function/method
.Ve
.PP
.Vb 2
\& my $hsp = $hsps->[0];          # $hsps is filled in by test harness
\& my $name = $hsp->name();
.Ve
.PP
.Vb 7
\& Purpose   : What the subroutine does.
\& Returns   : The types and values it returns.
\& Argument  : Required and optional input.
\& Throws    : Exceptions and other anomolies
\& Comments  : This is a sample subroutine header.
\&           : It is polite to include more pod and fewer comments.
\& See Also  : Other things that might be useful.
.Ve
.Sh "nB"
.IX Subsection "nB"
.Vb 1
\& Usage     : How to use this function/method
.Ve
.PP
.Vb 3
\& my $hsp = $hsps->[0];          # $hsps is filled in by test harness
\& my $q_natural_begin = $hsp->nB('query');
\& my $h_natural_begin = $hsp->nB('hit');
.Ve
.PP
.Vb 7
\& Purpose   : What the subroutine does.
\& Returns   : The types and values it returns.
\& Argument  : Required and optional input.
\& Throws    : Exceptions and other anomolies
\& Comments  : This is a sample subroutine header.
\&           : It is polite to include more pod and fewer comments.
\& See Also  : Other things that might be useful.
.Ve
.Sh "nE"
.IX Subsection "nE"
.Vb 1
\& Usage     : How to use this function/method
.Ve
.PP
.Vb 3
\& my $hsp = $hsps->[0];          # $hsps is filled in by test harness
\& my $q_natural_end = $hsp->nE('query');
\& my $h_natural_end = $hsp->nE('hit');
.Ve
.PP
.Vb 7
\& Purpose   : What the subroutine does.
\& Returns   : The types and values it returns.
\& Argument  : Required and optional input.
\& Throws    : Exceptions and other anomolies
\& Comments  : This is a sample subroutine header.
\&           : It is polite to include more pod and fewer comments.
\& See Also  : Other things that might be useful.
.Ve
.Sh "_check"
.IX Subsection "_check"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 7
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "_set_i"
.IX Subsection "_set_i"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 7
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "_set_exit"
.IX Subsection "_set_exit"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 7
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "\s-1AUTOLOAD\s0"
.IX Subsection "AUTOLOAD"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 7
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
