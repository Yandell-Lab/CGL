#!/usr/bin/perl -w 
use strict;

use Getopt::Std;
use vars qw($opt_t $opt_p $opt_c);
getopts('t p c');

BEGIN {
    $ENV{'CGL_CHATTER'} = 0;
}

$| = 1;
$SIG{INT} = \&gotControlC;
use FileHandle;
use CGL::Annotation;
use CGL::Annotation::Iterator;
use PostData;
use FastaFile;
use Fasta;

my $usage = "
chaos_data_dumper: takes a Chaos XML file & dumps the contig, transcripts\n
and proteins from it 

OPTIONS: -t (transcripts) -p (proteins) -c (contigs)

chaos_data_dumper -t:-p:-c <chaos.xml file>

example : chaos_data_dumper -t <chaos.xml file>

\n"; 

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

die $usage unless $ARGV[0];
die $usage unless (defined $opt_t || defined $opt_p || defined $opt_c); 

my $file = $ARGV[0];
my $chaos = new CGL::Annotation($file);
my $focus = $chaos->meta_data('focus_feature_id') || 
    'no focus given in file';
my $iterator = new CGL::Annotation::Iterator($chaos);
my $s = $chaos->contig(0);
my (@CONTIGS, @TRANSCRIPTS, @PROTEINS);

to_fasta($s);

while (my $g = $iterator->next_by_gene()){
    next unless $g->id eq $focus;
    my $i = 0;
    while(my $t = $g->transcript($i)){
	my $p = $t->translation(0);
	my $transcr_count = scalar @{$g->transcripts};
	my $transcr_length = length($t->residues);
	my $xtra_header;
	if ($p) {
	    my $transl_begin = $p->metaPos($t, 0);
	    my $transl_end = $p->metaPos($t, length($p->residues));
	    $xtra_header = " |transcr_count: $transcr_count" .
		"|CDS: ${transl_begin}-${transl_end}" .
		"|transcr_length: $transcr_length";
	}
	else {
	    $xtra_header = " |transcr_count: $transcr_count" .
		"|CDS: N/A|transcr_length: $transcr_length";
	}
	to_fasta($t, $xtra_header);
	to_fasta($p, $xtra_header) if $p;	
	$i++;
    }
} 
if    ($opt_t){
    dump_it(\@TRANSCRIPTS);
}
elsif ($opt_p){
    dump_it(\@TRANSCRIPTS);
}
elsif ($opt_c){
    dump_it(\@TRANSCRIPTS);
}
else {
}
#-----------------------------------------------------------------------------
#---------------------------------- SUBS -------------------------------------
#-----------------------------------------------------------------------------
sub dump_it {
    
    my $data;
    
    if    ($opt_t){
	$data = \@TRANSCRIPTS;
    }
    elsif ($opt_p){
	$data = \@PROTEINS;
    }
    elsif ($opt_c){
	$data = \@CONTIGS;
    }
    
    foreach my $fasta (@{$data}){
	print $$fasta;
    }
}
#-----------------------------------------------------------------------------
sub to_fasta {
    my ($o, $xtra_header) = @_;
    my $locus_tag = $o->properties('locus_tag');

    if (ref($o) =~ /Protein$/){
	my $fasta = Fasta::toFasta('>' . $o->uniquename() . ":$locus_tag" . 
				   $xtra_header, \$o->residues());
	push(@PROTEINS, $fasta);
    }
    elsif (ref($o) =~ /Transcript$/){
	my $fasta = Fasta::toFasta('>' . $o->uniquename() . ":$locus_tag" . 
				   $xtra_header, \$o->residues());
	push(@TRANSCRIPTS, $fasta);
    }
    elsif (ref($o) =~ /Contig$/){
	my $fasta = Fasta::toFasta('>'.$o->uniquename() . ":$locus_tag",
				   \$o->residues());
	push(@CONTIGS, $fasta);
    }
    else {
	die "Unknow type passed to sub to_fasta:".ref($o)."\n";
    }
    
}
#-----------------------------------------------------------------------------
sub gotControlC {
    
    die "died in chaos_data_dumper::gotContolC\n";
}
#-----------------------------------------------------------------------------
