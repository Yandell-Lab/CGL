#!/usr/bin/perl 
use strict;
use warnings;
use Getopt::Long;

#----------------------------------------------------------------------------- 
#----------------------------------- MAIN ------------------------------------ 
#----------------------------------------------------------------------------- 
my $usage = "

Synopsis:

wrap_splice_complexity --type [exonic|nucleo] --format [chaos|gff] \
       --org [FlyBase|WormBase] master_datastore.index

Description:

Pass this script a master_datastore_index and it will pass the correspoding genes
to splice_complexity_exonic or splice_complexity_nucleo. 

Options:

    --type    Do exonic or nucleotide distance.  Default is exonic.
    --format  What is the input format, chaos or gff?
    --org     What organism database, FlyBase or WormBase?
    --debug   Just print the splice_complexity_nucleo command line
              but don't actually run it.

";

my ($type, $out, $format, $org, $debug);
my $opt_success = GetOptions('type=s'   => \$type,
			     'out=s'    => \$out,
			     'format=s' => \$format,
			     'org=s'    => \$org,
			     'debug'     => \$debug,
			     );

my $md_file = shift;

die $usage unless ($md_file);
die "-type flag must be either nucleo or exonic, not $type\n\n$usage" 
    unless ($type =~ /nucleo|exonic/);
die "-format flag must be either gff or chaos, not $format\n\n$usage" 
    unless ($format =~ /gff|chaos/); 
die "-org flag must be either FlyBase or WormBase, not $org\n\n$usage" 
    if $org && ($org !~ /FlyBase|WormBase/); 

$org ||= '';

my $md = parse_datastore($md_file);

my $type_format = "${type}_${format}";

 GENE:
    for my $id (keys %{$md}) {

	    unless (exists $md->{$id}) {
		    print STDERR "Missing path for ID: $id\n";
		    next GENE;
	    }

	    my $gff_path = $md->{$id} ? $md->{$id} : undef;
	    my $chaos_path = $gff_path;
 	    my $fasta_path;
	    ($fasta_path = $gff_path) =~ s/.gff3/.fasta/; 

	    my %command_lines = (nucleo_gff    => "splice_complexity_nucleo --format $org --gff $gff_path --fasta $fasta_path",
				 exonic_gff    => "splice_complexity_exonic --format $org --gff $gff_path --fasta $fasta_path",
				 nucleo_chaos  => "splice_complexity_nucleo --chaos $chaos_path",
				 exonic_chaos  => "splice_complexity_exonic --chaos $chaos_path");

	    my $command_line = $command_lines{$type_format};
	    print STDERR "$command_line\n";

	    
	    if ($debug) {
		    print "$command_line\n";
	    }
	    else {
		    print `$command_line`;
	    }

	    if ($?) {
		    print "\n";
		    print STDERR "$id died with errors: $?\n";
	    }
    }

#----------------------------------------------------------------------------- 
#-------------------------------- SUBROUTINES -------------------------------- 
#----------------------------------------------------------------------------- 

sub parse_datastore {
	my $file = shift;

	open (my $IN, '<', $file) or die "Can't open $file\n";

	my %md;
	while (<$IN>) {
		chomp;
		my @fields = split /\t/, $_;
		my ($id, $path) = 
		      $format =~ /gff/i   ?  ($fields[0], $fields[1])
		    : $format =~ /chaos/i ?  ($fields[1], $fields[3])
		    :                        (undef, undef);
		die "Incorrect format specified.  Can't parse datastore\n" 
		    unless (defined $id && defined $path);

		$md{$id} = $path;
	}
	return \%md;
}
