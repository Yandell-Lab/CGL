#!/usr/bin/perl -w
use strict;
use PostData;

$| = 1;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

ws130_forward gff_file

Description:

This script will convert gff files from C. elegans release WS130 into gff3
compatible files that can by used by CGL GFF.

";

my $file = shift;

die $usage unless $file;

my $gene_coors = get_trnsc_coors($file);
my $id_lookup  = get_id_lookup($file, $gene_coors);

open (FH, $file);

print "##gff-version 3\n";
print "##Index-subfeatures 0\n";

my %BAD;
my %hash;
while (my $line = <FH>){
	chomp($line);
	my @fields = split("\t", $line);
	if ($fields[1] eq 'gene'){
		my ($id) = $fields[8] =~ /Gene\s+\"(\S+)\"/;
		next unless defined($id_lookup->{gene_to_transcr}->{$id});
		my $new = gene(\@fields, $id_lookup);
		print $new."\n" if $new;
	}
	elsif ($fields[1] eq 'Coding_transcript' && $fields[2] eq 'protein_coding_primary_transcript'){
                my ($id) = $fields[8] =~ /Transcript\s+\"(\S+)\"/;
		my $new = mRNA(\@fields, $id_lookup);
		print $new."\n" if $new;

	}
        elsif ($fields[1] eq 'Coding_transcript' && $fields[2] eq 'exon'){
                my ($id) = $fields[8] =~ /Transcript\s+\"(\S+)\"/;
                my $new = exon(\@fields, $id_lookup);
                print $new."\n" if $new;
        }
	elsif ($fields[1] eq 'curated' && $fields[2] eq 'coding_exon'){
                my ($id) = $fields[8] =~ /CDS\s+\"(\S+)\"/;
		my $new = cds(\@fields, $id_lookup);
		print $new."\n" if $new;
	}
        elsif ($fields[1] eq 'five_prime_exon_noncoding_region' && $fields[2] eq 'exon'){
                my ($id) = $fields[8] =~ /Transcript\s+\"(\S+)\"/;
                my $new = utr_5(\@fields, $id_lookup);
                print $new."\n" if $new;
        }
        elsif ($fields[1] eq 'three_prime_exon_noncoding_region' && $fields[2] eq 'exon'){
                my ($id) = $fields[8] =~ /Transcript\s+\"(\S+)\"/;
                my $new = utr_3(\@fields, $id_lookup);
                print $new."\n" if $new;
        }
        elsif ($fields[1] eq 'five_prime_noncoding_exon' && $fields[2] eq 'exon'){
                my ($id) = $fields[8] =~ /Transcript\s+\"(\S+)\"/;
                my $new = utr_5(\@fields, $id_lookup);
                print $new."\n" if $new;
        }
        elsif ($fields[1] eq 'three_prime_noncoding_exon' && $fields[2] eq 'exon'){
                my ($id) = $fields[8] =~ /Transcript\s+\"(\S+)\"/;
                my $new = utr_3(\@fields, $id_lookup);
                print $new."\n" if $new;
        }

}

close(FH);

#-----------------------------------------------------------------------------
#------------------------------- SUBROUTINES ---------------------------------
#-----------------------------------------------------------------------------
sub index_cdss {
        open(FH, $file);

        my %index;
        while (my $line = <FH>){
                next unless $line =~ /curated/;
                my @fields = split(/\t/, $line);

		my $transcr_id;
		if ($fields[2] eq 'CDS'){
			($transcr_id) = $fields[8] =~ /CDS\s+\"(\S+)\"$/;
		}
		elsif ($fields[2] eq 'coding_exon'){
			($transcr_id) = $fields[8] =~ /CDS\s+\"(\S+)\"$/;
		}
		else {
			next;
		}


                die "dead in get_trnsc_coors:$line\n" unless defined($transcr_id);

		$index{$transcr_id}++;

	}

	close(FH);

	return \%index;
}
#-----------------------------------------------------------------------------
sub get_trnsc_coors {
	my $file = shift;

	open(FH, $file);

        my %trnsc_coors;
        while (my $line = <FH>){
		next unless $line =~ /protein_coding_primary_transcript/;
		my @fields = split(/\t/, $line);

		next unless $fields[2] eq 'protein_coding_primary_transcript';

		my ($transcr_id) = $fields[8] =~ /Transcript\s+\"(\S+)\"$/;

		die "dead in get_trnsc_coors:$line\n" unless defined($transcr_id);

		my @id_fields = split(/\./, $transcr_id);

		my $cosmid  = $id_fields[0];
		my ($gene, $isoform)  = $id_fields[1] =~ /(\d+)([A-z]*)/;
		my $splice_form = $id_fields[2];

		my $gene_id = "${cosmid}.${gene}";
		$transcr_id = "${cosmid}.${gene}${isoform}";

		push(@{$trnsc_coors{$gene_id}}, {'start'   => $fields[3],
						 'end'     => $fields[4],
						 'strand'  => $fields[6],
						 'transcr' => $transcr_id,
					 });
	}
	close(FH);

	my $gene_coors = get_gene_coors(\%trnsc_coors);

	return $gene_coors;
}
#-----------------------------------------------------------------------------
sub get_gene_coors {
	my $trnsc_coors = shift;


	my %gene_coors;
	foreach my $gene_id (keys %{$trnsc_coors}){
		my $min;
		my $max;
		my @t_ids;
		my $strand;

		foreach my $t (@{$trnsc_coors->{$gene_id}}){
			my $start  = $t->{start};
			my $end    = $t->{end};
			my $t_id   = $t->{transcr};
			$strand = $t->{strand};

			$min ||= $start;
			$max ||= $end;

			$min = $start if $start < $min;
			$max = $end   if $end > $max;

			push(@t_ids, $t_id);

		}
		push(@{$gene_coors{$strand}{$min}{$max}}, @t_ids);
	}

	return \%gene_coors;
}
#-----------------------------------------------------------------------------
sub get_id_lookup {
	my $file  = shift;
	my $gene_coors = shift;

	open(FH, $file);

	my %lookup;
	while (my $line = <FH>){
		next if $line =~ /^\#/;
		my @fields = split("\t", $line);
	        if ($fields[1] eq 'gene' && $fields[2] eq 'gene'){

			my ($gen_id) = $fields[8] =~ /Gene\s+\"(\S+)\"/;

                        die "bad line-no id:".$fields[8]."\n"
                        unless defined($gen_id);

			my $strand = $fields[6];
			my $start  = $fields[3];
			my $end    = $fields[4];

			my $transcript_ids = $gene_coors->{$strand}{$start}{$end};


			next unless defined($transcript_ids);

	                $lookup{gene_to_transcr}{$gen_id} = $transcript_ids;

			foreach my $t_id (@{$transcript_ids}){
                		$lookup{transcr_to_gene}{$t_id} = $gen_id;
			}
        	}
	}
	close(FH);

	return \%lookup;
}
#-----------------------------------------------------------------------------
sub gene {
	my $fields = shift;
	my $lookup = shift;

	my ($id) = $fields->[8] =~ /Gene\s+\"(\S+)\"/;

	die "bad line-no id:".$fields->[8]."\n" unless defined($id);

	my @line;
	push(@line, $fields->[0]);
	push(@line, 'Coding_transcript');
	push(@line, $fields->[2]);
	push(@line, $fields->[3]);
	push(@line, $fields->[4]);
	push(@line, $fields->[5]);
	push(@line, $fields->[6]);
	push(@line, $fields->[7]);
	push(@line, "ID=Gene:$id;Name=$id;Easy=$id");

	if (defined($lookup->{gene_to_transcr}->{$id})){
		return join("\t", @line);
	}
	else {
		return undef;
	}
}
#-----------------------------------------------------------------------------
sub mRNA {
        my $fields = shift;
	my $lookup = shift;

        my ($id) = $fields->[8] =~ /Transcript\s+\"(\S+)\"/;

        die "bad line-no id:".$fields->[8]."\n" unless defined($id);

	my $parent = find_parent($lookup, $id);

        my @line;
        push(@line, $fields->[0]);
        push(@line, 'Coding_transcript');
        push(@line, 'mRNA');
        push(@line, $fields->[3]);
        push(@line, $fields->[4]);
        push(@line, $fields->[5]);
        push(@line, $fields->[6]);
        push(@line, $fields->[7]);
        push(@line, "ID=Transcript:$id;Name=Transcript:$id;Parent=Gene:$parent;Easy=$parent;prediction_status=unknown");


	if (defined($parent)){
		return join("\t", @line);
	}
	else {
		print STDERR "no parent for ID=Transcript:$id;Name=$id\n";
		#sleep 2;
		return undef;
	}
}
#-----------------------------------------------------------------------------
sub find_parent {
	my $lookup = shift;
	my $id     = shift;

	my @fields = split(/\./, $id);

	my $a = $id;
	my $b = $fields[0].'.'.$fields[1];

	my ($clean) = $fields[1] =~ /^(\d+)[A-z]*/;

	my $c = $fields[0].'.'.$clean;

	my $parent = $lookup->{transcr_to_gene}->{$a};
	   $parent = $lookup->{transcr_to_gene}->{$b} if ! $parent;
	   $parent = $lookup->{transcr_to_gene}->{$c} if ! $parent;

	if (! $parent) {
		print STDERR "NO PARENT for $id a:$a b:$b c:$c\n" unless $parent;
	}

	return $parent;
}
#-----------------------------------------------------------------------------
sub cds {
        my $fields = shift;
        my $lookup = shift;

        my ($id) = $fields->[8] =~ /CDS\s+\"(\S+)\"/;

        die "bad line-no id:".$fields->[8]."\n" unless defined($id);

        my $parent = $id;
	my $easy = find_parent($lookup, $id);

	my $c_id = id();

        my @line;
        push(@line, $fields->[0]);
        push(@line, 'Coding_transcript');
        push(@line, 'CDS');
        push(@line, $fields->[3]);
        push(@line, $fields->[4]);
        push(@line, $fields->[5]);
        push(@line, $fields->[6]);
        push(@line, $fields->[7]);
        push(@line, "ID=CDS:$id\.$c_id;Name=CDS:$id\.$c_id;Parent=Transcript:$parent;Easy=$easy");


        if (defined($parent) && defined($easy)){
                return join("\t", @line);
        }
        else {
                print STDERR "no parent for ID=Transcript:$id;Name=$id\n";
                #sleep 2;
                return undef;
        }
}
#-----------------------------------------------------------------------------
{
my $id = -1;
sub id {
	$id++;
	return $id;
}
}
#-----------------------------------------------------------------------------
sub exon {
        my $fields = shift;
        my $lookup = shift;

        my ($id) = $fields->[8] =~ /Transcript\s+\"(\S+)\"/;

        die "bad line-no id:".$fields->[8]."\n" unless defined($id);

	my $parent = find_parent($lookup, $id);
	my $e_id = id();

        my @line;
        push(@line, $fields->[0]);
        push(@line, 'Coding_transcript');
        push(@line, $fields->[2]);
        push(@line, $fields->[3]);
        push(@line, $fields->[4]);
        push(@line, $fields->[5]);
        push(@line, $fields->[6]);
        push(@line, $fields->[7]);
        push(@line, "ID=Exon:$id\.$e_id;Name=Exon:$id\.$e_id;Parent=Gene:$parent;Easy=$parent");


        if (defined($parent)){
                return join("\t", @line);
        }
        else {
                print STDERR "no parent for ID=Gene:$id;Name=$id\n";
                #sleep 2;
                return undef;
        }
}
#-----------------------------------------------------------------------------
sub utr_5 {
        my $fields = shift;
        my $lookup = shift;

        my ($id) = $fields->[8] =~ /Transcript\s+\"(\S+)\"/;

        die "bad line-no id:".$fields->[8]."\n" unless defined($id);

        my $parent = $id;
	my $easy = find_parent($lookup, $id);
	my $u_id = id();

        my @line;
        push(@line, $fields->[0]);
        push(@line, 'Coding_transcript');
        push(@line, 'five_prime_UTR');
        push(@line, $fields->[3]);
        push(@line, $fields->[4]);
        push(@line, $fields->[5]);
        push(@line, $fields->[6]);
        push(@line, $fields->[7]);
        push(@line, "ID=five_prime_UTR:$id\.$u_id;Name=$id\.$u_id;Parent=Transcript:$parent;Easy=$easy");


        if (defined($parent) && defined($easy)){
                return join("\t", @line);
        }
        else {
                print STDERR "no parent for ID=Transcript:$id;Name=$id\n";
                #sleep 2;
                return undef;
        }
}
#-----------------------------------------------------------------------------
sub utr_3 {
        my $fields = shift;
        my $lookup = shift;

        my ($id) = $fields->[8] =~ /Transcript\s+\"(\S+)\"/;

        die "bad line-no id:".$fields->[8]."\n" unless defined($id);

        my $parent = $id;
	my $easy = find_parent($lookup, $id);
	my $u_id   = id();

        my @line;
        push(@line, $fields->[0]);
        push(@line, 'Coding_transcript');
        push(@line, 'three_prime_UTR');
        push(@line, $fields->[3]);
        push(@line, $fields->[4]);
        push(@line, $fields->[5]);
        push(@line, $fields->[6]);
        push(@line, $fields->[7]);
        push(@line, "ID=three_prime_UTR:$id\.$u_id;Name=$id\.$u_id;Parent=Transcript:$parent;Easy=$easy");


        if (defined($parent) && defined($easy)){
                return join("\t", @line);
        }
        else {
                print STDERR "no parent for ID=Transcript:$id;Name=$id\n";
                #sleep 2;
                return undef;
        }
}

#-----------------------------------------------------------------------------
sub shorten {

	my $file = shift;

	open(FH, $file);

	while (my $line = <FH>){
        	chomp($line);
        	my @fields = split("\t", $line);
        	if ($fields[1] eq 'gene'){
                	print $line."\n";
        	}
        	elsif ($fields[1] eq 'Coding_transcript'){
                	print $line."\n";
        	}
        	elsif ($fields[1] eq 'curated'){
                	print $line."\n";
        	}
		elsif ($fields[1] eq 'five_prime_exon_noncoding_region'){
                        print $line."\n";
                }
		elsif ($fields[1] eq 'three_prime_exon_noncoding_region'){
                        print $line."\n";
                }
                elsif ($fields[1] eq 'five_prime_noncoding_exon'){
                        print $line."\n";
                }
                elsif ($fields[1] eq 'three_prime_noncoding_exon'){
                        print $line."\n";
                }
	}

	close(FH);
}
#-----------------------------------------------------------------------------
sub print_keys {

	my $file = shift;

	open(FH, $file);

	my $hash;
        while (my $line = <FH>){
                chomp($line);
                my @fields = split("\t", $line);
		$hash{$fields[1]}{$fields[2]} = $fields[8];
        }

	foreach my $key (sort keys %hash){
        	print $key."\n";
        	foreach my $key_2 (sort keys %{$hash{$key}}){
			my $space = 25 - length($key_2);
			my $spacer = " "x$space;
                	print "     $key_2$spacer-------->".$hash{$key}{$key_2}."\n";;
        	}
	}
	close(FH);

}
#-----------------------------------------------------------------------------

