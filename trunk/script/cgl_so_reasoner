#!/usr/bin/perl -w 

# pod docs at end.

use strict;

$| = 1;

use CGL::Ontology::SO;

my $usage = "

cgl_so_reasoner: See what SO implies about the relationships between two terms.

USAGE:   cgl_so_reasoner <term> <term>

EXAMPLE: cgl_so_reasoner exon mRNA

\n"; 

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

#$ENV{'CGL'}         = $ENV{'HOME'} . "/projects/cgl-release/cgl/trunk";
#$ENV{'CGL_SO_SOURCE'} = $ENV{'CGL'} . "/sample_data/sofa.obo";

my $so = new CGL::Ontology::SO();

my $a = shift;
my $b = shift;

die $usage unless defined($a) && defined($b);

print "The id of $a is ", $so->node_by_name($a)->id(), "\n";
print "The id of $b is ", $so->node_by_name($b)->id(), "\n";
print "\n";

my $a_def = $so->node_by_name($a)->def() || 'This term is awaiting a definition.';
my $b_def = $so->node_by_name($b)->def() || 'This term is awaiting a definition.';

print "The definition of $a is: $a_def\n";
print "\n";
print "The definition of $b is: $b_def\n";
print "\n";

print_relations($a, $so);
print_relations($b, $so);

if ($so->some_b_could_have_a($b, $a)){
        print "In principle SOME $b\(s\) COULD have $a\(s\)\n";
}
else {
        print "NO $b\(s\) CAN have $a\(s\)\n";
}
if ($so->some_b_have_a($b, $a)){
        print "SOME $b\(s\) MUST have $a\(s\)\n";
}
else {
        print "NO $b\(s\) MUST have $a\(s\)\n";
}
if ($so->all_b_have_a($b, $a)){
	print "ALL $b\(s\) have $a\(s\)\n";
}
else {
	print "NOT ALL $b\(s\) have $a\(s\)\n";
}

if   ($so->a_is_hypomeronym_of_b($a, $b ) == 1){
        print "(1) a\(n\) $a   isa  $b\n";
}
elsif ($so->a_is_hypomeronym_of_b($a, $b ) == 2){
        print "(2) a\(n\) $a  is NECESSARY for the existance OF a\(n\) $b\n";
}
else {
	print "(0) a\(n\) $a  is NOT NECESSARY for the existance OF a\(n\) $b\n";
}

print "\n";

print "\n";
if   ($so->a_is_hyponym_of_b($a, $b ) == 1){
	print "(1) a\(n\) $a  LITERALLY isa  $b\n";
}
elsif ($so->a_is_hyponym_of_b($a, $b ) == 2){
        print "(2) a\(n\) $a  isa  $b\n";
}
else {
	print "(0) a\(n\) $a  is NOT a\(n\) $b\n";
}

print "\n";
print "the immediate hypernyms of $a are ".$so->hypernym($a)."\n";
print "the immediate hyponyms  of $a are ".$so->hyponym($a)."\n";
print "\n";

print "the immediate hypermeronyms of $a are ".$so->hypermeronym($a)."\n";
print "the immediate hypomeronyms  of $a are ".$so->hypomeronym($a)."\n";
print "\n";

if ($so->a_is_meronym_of_b($a, $b) == 1){
	print "(1) a\(n\) $a  is a EXPLICIT  part of a\(n\) $b\n";
}
elsif ($so->a_is_meronym_of_b($a, $b) == 2){
        print "(2) a\(n\) $a is POTENTIALLY part of a\(n\) $b\n";
}
elsif ($so->a_is_meronym_of_b($a, $b) == 3){
        print "(3) a\(n\) $a  is part of SOME $b\(s\)\n";
}
else {
	print "a\(n\) $a is NOT part of a\(n\) $b\n";
}
print "\n";

#-----------------------------------------------------------------------------
#---------------------------------- SUBS -------------------------------------
#-----------------------------------------------------------------------------
sub print_relations {
	my $a     = shift;
	my $so    = shift;
	my $logus = shift;
	my $node = $so->node_by_name($a);

	print "$a relations\n";
	foreach my $r ($node->relationships){
		next if (defined($logus) && $r->logus ne $logus);
		# skip over things we can't cope with.
		next if (($r->logus ne 'isa') ||
			 ($r->logus ne 'part_of')
			);

		my $relation;
		if    ($r->logus eq 'isa' && $node->id() eq $r->sF){
			$relation = 'ISA_CHILD_OF';
		}
		elsif ($r->logus eq 'isa' && $node->id() eq $r->oF){
			$relation = 'ISA_PARENT_OF'
		}
		elsif ($r->logus eq 'part_of' && $node->id() eq $r->sF){
			$relation = 'IS_PART_OF';
		}
		elsif ($r->logus eq 'part_of' && $node->id() eq $r->oF){
			$relation = 'HASA';
		}
		else {
			die "logic error is sub  relations\n";
		}
		
		my $sbj_relation = $r->logus eq 'isa' ? 'ISA' : 'HASA';

		my $r_sbj_name = $so->node_by_id($r->sF)->name();
		print "  ".$relation." $r_sbj_name\n" unless $r->sF eq $node->id();

		my $obj_relation = $r->logus eq 'isa' ? 'ISA' : 'IS_PART_OF';

		my $r_obj_name = $so->node_by_id($r->oF)->name();
		print "  ".$relation." $r_obj_name\n" unless $r->oF eq $node->id();
	}
}

__END__

=head1 NAME

cgl_so_reasoner

=head1 SYNOPSIS

  cgl_so_reasoner <term> <term>

  cgl_so_reasoner exon mRNA

=head1 DESCRIPTION

See what SO implies about the relationships between two terms.

=head1 DOCUMENTATION

L<http://www.yandell-lab.org/cgl>

=cut


