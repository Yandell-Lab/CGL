.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGL::Annotation::Feature 3"
.TH CGL::Annotation::Feature 3 "2004-10-05" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
CGL::Annotation::Feature \- The CGL annotation feature object.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  # make sure that there's a SO file available.
\&  BEGIN {
\&    $ENV{SO_OBO_FILE} = "sample_data/so.obo" unless $ENV{SO_OBO_FILE};
\&  }
.Ve
.PP
.Vb 2
\&  use CGL::Annotation::Feature;
\&  my $f = new CGL::Annotation::Feature;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Stub documentation for this module was created by
ExtUtils::ModuleMaker.  And, then it was poked, prodded, and otherwise
massaged into it's current form by George.
.PP
Hopefully the module author wasn't negligent enough to leave the stub
unedited.
.PP
Blah blah blah.
.SH "USAGE"
.IX Header "USAGE"
.SH "BUGS"
.IX Header "BUGS"
Not yet.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\& Mark Yandell
\& myandell@fruitfly.org
\& http://www.yandell-lab.org
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "FUNCTION/METHOD DOCUMENTATION"
.IX Header "FUNCTION/METHOD DOCUMENTATION"
The rest of this document describes the {class,package}'s methods and
subroutines.  Private methods are usually preceded with an underscore
(_) and should not be considered part of the supported interface (they
may change without warning).
.SH "CGL::Annotation::Feature"
.IX Header "CGL::Annotation::Feature"
CGL::Annotation::Feature \- The platonic ideal of a \s-1CGL\s0 module.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use CGL::Annotation::Feature;
\&  my $foo = new CGL::Annotation::Feature;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Stub documentation for this module was created by
ExtUtils::ModuleMaker.  And, then it was poked, prodded, and otherwise
massaged into it's current form by George.
.PP
Hopefully the module author wasn't negligent enough to leave the stub
unedited.
.PP
Blah blah blah.
.SH "USAGE"
.IX Header "USAGE"
Expand on the examples from the \s-1SYNOPSIS\s0.
.SH "BUGS"
.IX Header "BUGS"
Not yet.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\& Mark Yandell
\& myandell@fruitfly.org
\& http://www.yandell-lab.org
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
List other relevant resources.
.SH "FUNCTION/METHOD DOCUMENTATION"
.IX Header "FUNCTION/METHOD DOCUMENTATION"
The rest of this document describes the {class,package}'s methods and
subroutines.  Private methods are usually preceded with an underscore
(_) and should not be considered part of the supported interface (they
may change without warning).
.Sh "new"
.IX Subsection "new"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 2
\&  use CGL::Annotation::Feature;
\&  my $feat = new CGL::Annotation::Feature;
.Ve
.PP
.Vb 7
\& Purpose   : Create a new CGL::Annotation::Feature object.
\& Returns   : A reference to the object.
\& Argument  : XXXX
\& Throws    :
\& Comments  : XXXX Never used anywhere.
\&           :
\& See Also  :
.Ve
.Sh "residues"
.IX Subsection "residues"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 1
\&  use CGL::Annotation;
.Ve
.PP
.Vb 3
\&  my $a;                        # an annotation.
\&  my $some_contig;              # a feature.
\&  my $residues;                 # the residues.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $some_contig = $a->feature("contig-3283");
\&  $residues = $some_contig->residues();
.Ve
.PP
.Vb 7
\& Purpose   : set/get the residues value.
\& Returns   : The value of the residues field.
\& Argument  : The value for the residues field if setting it.
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "nbeg"
.IX Subsection "nbeg"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 1
\&  use CGL::Annotation;
.Ve
.PP
.Vb 3
\&  my $a;                        # an annotation.
\&  my $feature;                  # a feature.
\&  my $nbeg;                     # its natural begin.
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $feature = $a->feature("contig-3283");
.Ve
.PP
.Vb 1
\&  $nbeg = $feature->nbeg();
.Ve
.PP
.Vb 7
\& Purpose   : set/get the nbeg value.
\& Returns   : The value of the nbeg field.
\& Argument  : The value for the nbeg field if setting it.
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "nend"
.IX Subsection "nend"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 1
\&  use CGL::Annotation;
.Ve
.PP
.Vb 3
\&  my $a;                        # an annotation.
\&  my $feature;                  # a feature.
\&  my $nend;                     # its natural end.
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $feature = $a->feature("contig-3283");
.Ve
.PP
.Vb 1
\&  $nend = $feature->nend();
.Ve
.PP
.Vb 7
\& Purpose   : Set/get the natural end of the feature.
\& Returns   : A natural end of the feature, as a scalar.
\& Argument  : The natural end to set the value, none otherwise.
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "length"
.IX Subsection "length"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 1
\&  use CGL::Annotation;
.Ve
.PP
.Vb 3
\&  my $a;                        # an annotation.
\&  my $feature;                  # a feature.
\&  my $length;                   # its length.
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $feature = $a->feature("contig-3283");
.Ve
.PP
.Vb 1
\&  $length = $feature->length();
.Ve
.PP
.Vb 7
\& Purpose   : Get the length of the feature.
\& Returns   : The length as a scalar.
\& Argument  : none.
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "uniquename"
.IX Subsection "uniquename"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
\&  my $u;                        # the feature's unique name.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  $u = $l[0]->uniquename();
.Ve
.PP
.Vb 7
\& Purpose   : Get the Feature's uniquename.
\& Returns   : The value of the residues field.
\& Argument  :
\& Throws    :
\& Comments  : Replaces any occurences of "/" in the uniquename with
\&           : "-".
\& See Also  :
.Ve
.Sh "featureLocation \s-1XXXX\s0 \s-1NOT\s0 \s-1FINISHED\s0"
.IX Subsection "featureLocation XXXX NOT FINISHED"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
\&  my $location;                 # the feature's unique name.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  $location = $l[0]->featureLocation();
.Ve
.PP
.Vb 7
\& Purpose   : Get the Feature's uniquename.
\& Returns   : The value of the residues field.
\& Argument  :
\& Throws    :
\& Comments  : Replaces any occurences of "/" in the uniquename with
\&           : "-".
\& See Also  :
.Ve
.Sh "name"
.IX Subsection "name"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
\&  my $n;                        # the feature's unique name.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  $n = $l[0]->name();
.Ve
.PP
.Vb 7
\& Purpose   : Get the Feature's name.
\& Returns   : The name of the Feature, as a scalar.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "type"
.IX Subsection "type"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
\&  my $t;                        # the feature's unique name.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  $t = $l[0]->type();
.Ve
.PP
.Vb 7
\& Purpose   : Get the Feature's type.
\& Returns   : The type of the Feature, as a scalar.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "strand"
.IX Subsection "strand"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
\&  my $s;                        # the feature's unique name.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  $s = $l[0]->strand();
.Ve
.PP
.Vb 7
\& Purpose   : Get the Feature's type.
\& Returns   : The type of the Feature, as a scalar. (1 or -1)
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "id"
.IX Subsection "id"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
\&  my $i;                        # the feature's id.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  $i = $l[0]->id();
.Ve
.PP
.Vb 7
\& Purpose   : Get the Feature's id.
\& Returns   : The type of the Feature, as a scalar.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "inScope"
.IX Subsection "inScope"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 6
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
\&  my $i;                        # the feature's id.
\&  my $is_in_scope;
\&  my $is_not_in_scope;
.Ve
.PP
.Vb 6
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  $l[0]->inScope(0);
\&  $is_not_in_scope =   $l[0]->inScope();
\&  $l[0]->inScope(1);
\&  $is_in_scope =   $l[0]->inScope();
.Ve
.PP
.Vb 7
\& Purpose   : Get or set whether the feature's in scope or not.
\& Returns   : 1 or -1
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "properties"
.IX Subsection "properties"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $g;                        # a gene from the annotation.
\&  my $note;                     # a note from the featureprop.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $g = $a->gene(0);
\&  $note = $g->properties('note');
.Ve
.PP
.Vb 7
\& Purpose   :
\& Returns   :
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "relationships"
.IX Subsection "relationships"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
\&  my @r;                        # the feature's relationships.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  @r = $l[0]->relationships();
.Ve
.PP
.Vb 7
\& Purpose   : Get the feature's relationshiops.
\& Returns   : An array of the features (possibly empty).
\& Argument  : None.
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "_add_id"
.IX Subsection "_add_id"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 3
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  $l[0]->_add_id('feature_id');
.Ve
.PP
.Vb 7
\& Purpose   : What the subroutine does.
\& Returns   : The types and values it returns.
\& Argument  : Required and optional input.
\& Throws    : Exceptions and other anomolies
\& Comments  : This is a sample subroutine header.
\&           : It is polite to include more pod and fewer comments.
\& See Also  : Other things that might be useful.
.Ve
.Sh "_so"
.IX Subsection "_so"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @l;                        # a list of gene features.
\&  my $so;                       # a reference to out so object.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @l = $a->featuresByType('gene');
\&  $so = $l[0]->_so();
.Ve
.PP
.Vb 7
\& Purpose   : Provide access to a common SO object.
\& Returns   : A reference to a SO object.
\& Argument  :
\& Throws    :
\& Comments  : The shared so object is part of a closure.
\&           :
\& See Also  : CGL::Ontology::SO
.Ve
.Sh "_add_residues"
.IX Subsection "_add_residues"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 7
\& Purpose   : Add residues from a contig to a feature.
\& Returns   : Whether the feature is "inScope".
\& Argument  : A reference to a contig.
\& Throws    : die()'s if either the Feature or the contig has an invalid
\&           : strand.
\& Comments  :
\& See Also  :
.Ve
.Sh "_load_feature"
.IX Subsection "_load_feature"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 8
\& Purpose   : Load up a hash of feature information.
\& Returns   : A reference to a hash full of feature info.
\& Argument  : A hash full of the feature's info.
\& Throws    :
\& Comments  : Generally just copies the hash fields,
\&           : but it creates FeatureLocation objects for anything in the
\&           : the location field.
\& See Also  : CGL::Annotation::FeatureLocation
.Ve
.Sh "_add_location"
.IX Subsection "_add_location"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 7
\& Purpose   : Add a location to the list of locations.
\& Returns   :
\& Argument  : The location to be added.
\& Throws    :
\& Comments  : XXXX appears to be unused.
\&           :
\& See Also  : CGL::Annotation::FeatureLocation
.Ve
.Sh "_add_relationship"
.IX Subsection "_add_relationship"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 7
\& Purpose   : Add a relationship to the list of relationships.
\& Returns   :
\& Argument  : The relationship to be added.
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::FeatureRelationships
.Ve
.Sh "_get_begin_end_on_src"
.IX Subsection "_get_begin_end_on_src"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 8
\& Purpose   : Get via metaPos the begin & end of a feature on it's source.
\& Returns   : An list, first element is the begin, second element is the end
\&           : of the feature on the source.
\& Argument  : The source contig. (XXXX contig?)
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Intron::_get_begin_end_on_src
.Ve
.Sh "_add_src_id"
.IX Subsection "_add_src_id"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 7
\& Purpose   : What the subroutine does.
\& Returns   : The types and values it returns.
\& Argument  : Required and optional input.
\& Throws    : Exceptions and other anomolies
\& Comments  : This is a sample subroutine header.
\&           : It is polite to include more pod and fewer comments.
\& See Also  : Other things that might be useful.
.Ve
.Sh "\s-1AUTOLOAD\s0"
.IX Subsection "AUTOLOAD"
.Vb 1
\& Usage     : *private*
.Ve
.PP
.Vb 8
\& Purpose   : Implments a generic getter/setter routine for attributes that
\&           : aren't worth defining explicitly.
\& Returns   : The current value of that field in the object.
\& Argument  : The new value for that field in the object.
\& Throws    :
\& Comments  : Explicitly passing an argument of "undef" will effectively
\&           : undefine that field in the hash.
\& See Also  :
.Ve
