.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGL::Annotation 3"
.TH CGL::Annotation 3 "2006-02-22" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
CGL::Annotation \- An object for working with genome annotations.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  # make sure that there's a SO file available.
\&  BEGIN {
\&    $ENV{SO_OBO_FILE} = "sample_data/so.obo" unless $ENV{SO_OBO_FILE};
\&  }
.Ve
.PP
.Vb 2
\&  use CGL::Annotation;
\&  my $a;                        # an annotation.
.Ve
.PP
.Vb 1
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for the \s-1CGL\s0 Annotation object hierarchy.  It
provides general functionality used by all of it inheritors.
.SH "USAGE"
.IX Header "USAGE"
.SH "BUGS"
.IX Header "BUGS"
Not yet.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\& Mark Yandell
\& myandell@fruitfly.org
\& http://www.yandell-lab.org
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CGL::Ontology::SO
.PP
The \s-1SO_OBO_FILE\s0 environment variable, which defines the default
location for the \s-1OBO\s0 format file that describes Sequence Ontology.
.SH "FUNCTION/METHOD DOCUMENTATION"
.IX Header "FUNCTION/METHOD DOCUMENTATION"
The rest of this document describes the {class,package}'s methods and
subroutines.  Private methods are usually preceded with an underscore
(_) and should not be considered part of the supported interface (they
may change without warning).
.Sh "new"
.IX Subsection "new"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 1
\&  my $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
.Ve
.PP
.Vb 8
\& Purpose   : Create a new CGL::Annotation object, and optionally load
\&             it with data from a chaos-xml file.
\& Returns   : a reference to a CGL::Annotation object.
\& Argument  : the name of a chaos-xml file [optional].
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
.Sh "transcript"
.IX Subsection "transcript"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $t;                        # reference to a transcript feature
\&  my $i;                        # index into transcript list.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $i = 0;
\&  $t = $a->transcript($i);
.Ve
.PP
.Vb 7
\& Purpose   : access a transcript from an annotation.
\& Returns   : a reference to the i'th transcript feature.
\& Argument  : the zero-based index identifying the transcript feature.
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Transcript
.Ve
.Sh "translation"
.IX Subsection "translation"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $i;                        # index of the translation
\&  my $p;                        # reference to a protein feature
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $i = 0;
\&  $p = $a->translation($i);
.Ve
.PP
.Vb 7
\& Purpose   : return the i'th protein feature from the annotation.
\& Returns   : a scalar containing the translated sequence.
\& Argument  : a zero-based integer identifying the protein feature.
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Protein
.Ve
.Sh "get_gene_by_id"
.IX Subsection "get_gene_by_id"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $g;                        # reference to a gene object
\&  my $i;                        # gene identifier
.Ve
.PP
.Vb 1
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
.Ve
.PP
.Vb 2
\&  $i = "gene-107698";                   # identifier for gene
\&  $g = $a->get_gene_by_id($i);
.Ve
.PP
.Vb 9
\& Purpose   : return a reference to the gene object with the requested
\&             id from the annotation.
\& Returns   : a reference to a gene object, undef if there isn't a gene
\&             with that identifier.
\& Argument  : a string containing the gene id.
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Gene
.Ve
.Sh "get_gene_by_name"
.IX Subsection "get_gene_by_name"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $g;                        # reference to a gene feature.
\&  my $n;                        # gene name
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $n = "At3g23010";                     # name of gene of interest
\&  $g = $a->get_gene_by_name($n);
.Ve
.PP
.Vb 9
\& Purpose   : return a reference to the gene object with the requested
\&             name from the annotation.
\& Returns   : a reference to a gene object, undef if there isn't a gene
\&             with that name.
\& Argument  : a string containing the gene name.
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Gene
.Ve
.Sh "get_gene_by_uniquename"
.IX Subsection "get_gene_by_uniquename"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $g;                        # reference to a gene object
\&  my $u;                        # unique gene name
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $u = "At3g23010-gene-107698";         # uniquename for gene of interest
\&  $g = $a->get_gene_by_uniquename($u);
.Ve
.PP
.Vb 9
\& Purpose   : return a reference to the gene object with the requested
\&             uniquename from the annotation.
\& Returns   : a reference to a gene object, undef if there isn't a gene
\&             with that uniquename.
\& Argument  : a string containing the gene name.
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Gene
.Ve
.Sh "gene"
.IX Subsection "gene"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $g;                        # reference to a gene object
\&  my $i;                        # index of gene feature.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $i = 0;                       # identifier for gene of interest
\&  $g = $a->gene($i);
.Ve
.PP
.Vb 9
\& Purpose   : return a reference to the i'th gene feature in the
\&             annotation.
\& Returns   : a reference to a gene object, undef if there
\&             isn't an i'th gene.
\& Argument  : an integer, the index into the list of genes.
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Gene
.Ve
.Sh "genes"
.IX Subsection "genes"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 3
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $g;                        # reference to an array of gene objects
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $g = $a->genes();
.Ve
.PP
.Vb 9
\& Purpose   : return a reference to a list of gene objects from the
\&             annotation.
\& Returns   : a reference to a (possibly empty) list of gene objects,
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Gene
\&             CGL::Ontology::SO
.Ve
.Sh "transcripts"
.IX Subsection "transcripts"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 3
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $t;                        # reference to a list of transcripts
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $t = $a->transcripts();
.Ve
.PP
.Vb 9
\& Purpose   : return a reference to a list of transcript objects
\&             from the annotation.
\& Returns   : a reference to a (possibly empty) list of
\&             transcript objects.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Transcript
.Ve
.Sh "contig"
.IX Subsection "contig"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $i;                        # index of the contig of interest.
\&  my $c;                        # reference to a contig feature object
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $i = 0;
\&  $c = $a->contig($i);
.Ve
.PP
.Vb 8
\& Purpose   : return a reference to the i'th contig feature in the annotation.
\& Returns   : a reference to the i'th contig feature, undef if there isn't an
\&             i'th contig.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Contig
.Ve
.Sh "contigs"
.IX Subsection "contigs"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 3
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $c;                        # reference to a list of contigs
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $c = $a->contigs();
.Ve
.PP
.Vb 8
\& Purpose   : return a reference to a list of contig objects from the
\&             annotation.
\& Returns   : a reference to a (possibly empty) list of contig objects.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Contig
.Ve
.Sh "translations"
.IX Subsection "translations"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 3
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $t;                        # reference to a list of translations
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $g = $a->translations();
.Ve
.PP
.Vb 8
\& Purpose   : return a reference to a list of translations from the
\&             annotation.
\& Returns   : a reference to a (possibly empty) list of translations.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Translation
.Ve
.Sh "exons"
.IX Subsection "exons"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 3
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $l;                        # a list of exon features.
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $l = $a->exons();
.Ve
.PP
.Vb 8
\& Purpose   : return a reference to a list of gene objects from the
\&             annotation.
\& Returns   : A (possibly empty) list of exon features.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature::Exon
.Ve
.Sh "featuresByType"
.IX Subsection "featuresByType"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $t;                        # the type, as a string.
\&  my @l;                        # a list of the features.
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $t = 'exon';
\&  @l = $a->featuresByType($t);
.Ve
.PP
.Vb 7
\& Purpose   : retrieve a set of Feature objects from an annotation.
\& Returns   : a list of Feature objects from the annotation.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature
.Ve
.Sh "feature"
.IX Subsection "feature"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 4
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $id;                       # the id of the feature.
\&  my $f;                        # reference to a Feature object
.Ve
.PP
.Vb 3
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $id = "NC_003074.1";
\&  $f = $a->feature($id);
.Ve
.PP
.Vb 9
\& Purpose   : retrieve a feature with a particular id from the
\&             annotation.
\& Returns   : a reference to a feature object, undef if there is
\&             no feature with the requested id.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature
.Ve
.Sh "features"
.IX Subsection "features"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 3
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @f;                        # a list of features
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  @f = $a->features();
.Ve
.PP
.Vb 7
\& Purpose   : retrieve the set of features from an annotation.
\& Returns   : a (possibly empty) list of feature objects.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Annotation::Feature
.Ve
.Sh "relationships"
.IX Subsection "relationships"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 3
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my @r;                        # a list of the NodeRelationship objects in $a.
.Ve
.PP
.Vb 2
\&  $a = new CGL::Annotation;
\&  @r = $a->relationships();
.Ve
.PP
.Vb 8
\& Purpose   : retrieve information about the annotation's
\&             feature relationships
\& Returns   : a (possibly emtpy) list of NodeRelationship objects.
\& Argument  :
\& Throws    :
\& Comments  :
\&           :
\& See Also  : CGL::Ontology::NodeRelationship
.Ve
.Sh "trace"
.IX Subsection "trace"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 9
\&  use CGL::Annotation;
\&  my $a;                        # reference to a CGL::Annotation
\&  my $a_rab1;                   # reference to a CGL::Annotation
\&  my $f;                        # the interesting feature
\&  my $f_rab1;                   # the interesting feature
\&  my $t_parts;                  # the trace through the parts relationship.
\&  my $t_whole;                  # the trace through the whole relationship.
\&  my $t_produces_rab1;          # the trace through the parts relationship.
\&  my $t_producers_rab1;         # the trace through the whole relationship.
.Ve
.PP
.Vb 5
\&  $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  $f = $a->feature('gene-107698');
\&  $t_parts = $a->trace($f, 'parts');
\&  $f = $a->feature('mRNA-107699');
\&  $t_whole = $a->trace($f, 'wholes');
.Ve
.PP
.Vb 6
\&  # the rab1 file uses 'derives_from' instead of 'produced_by'
\&  $a_rab1 = new CGL::Annotation("sample_data/Rab1.chaos.xml");
\&  $f_rab1 = $a_rab1->feature('mRNA:EMBL/GenBank/SwissProt:AE003734:52204:55287');
\&  $t_produces_rab1 = $a_rab1->trace($f_rab1, 'produces');
\&  $f_rab1 = $a_rab1->feature('AAF55873.1');
\&  $t_producers_rab1 = $a_rab1->trace($f_rab1, 'producers');
.Ve
.PP
.Vb 16
\& Purpose   : trace through the relations for a feature in an annotation.
\& Returns   : a reference to a trace object.
\& Argument  : A Feature to trace from.
\&             A type of trace (as a string).  Valid values include:
\&               'parts'
\&               'producers'
\&               'wholes'
\&               'produces'
\& Throws    :
\& Comments  : Can also take an optional index and trace, used
\&           : internally for recursing
\&           : among the relationships.
\&           :
\&           : In newer SO releases, the typedef derived_from has replaced
\&           : the produced_by typedef.  This sub currently works with either.
\& See Also  : CGL::Annotation::Trace
.Ve
.Sh "metadata"
.IX Subsection "metadata"
.Vb 1
\& Usage     :
.Ve
.PP
.Vb 3
\&  my $a = new CGL::Annotation("sample_data/atha.sample.chaos.xml");
\&  my $export_user;              # a reference to the metadata.
\&  $export_user = $a->meta_data("export_user");
.Ve
.PP
.Vb 7
\& Purpose   : Access chaos-xml metadata.
\& Returns   : a ref
\& Argument  : an optional key.
\& Throws    :
\& Comments  :
\&           :
\& See Also  :
.Ve
