#!/usr/bin/perl -w 

eval 'exec /usr/bin/perl -w  -S $0 ${1+"$@"}'
    if 0; # not running under some shell
use strict;

BEGIN {
	$ENV{'CGL_CHATTER'} = 1;
}


$| = 1;
use FileHandle;
use CGL::Annotation;
use CGL::Annotation::Iterator;
use CGL::TranslationMachine;
use CGL::Ontology::SO;

my $usage = "

cgl_validate: a simple script that attempts to check 
          the semantic integrity of a chaos.xml 
          document 

cgl_validate <chaos.xml file>

cgl_validate CG33070.chaos.xml


\n"; 

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

die $usage unless $ARGV[0];

my $file  = $ARGV[0];


my $SO = new CGL::Ontology::SO();

my $TM = new CGL::TranslationMachine();

my $annotation = new CGL::Annotation($file);

my $i = 0;
while (my $c = $annotation->contig($i)){
	die unless defined($c->residues); #gh exit(1) ?
	$i++;
}
my $iterator = new CGL::Annotation::Iterator($annotation);

while (my $data = $iterator->next_by_transcript()){
                my $t = $data->[0];
                my $g = $data->[1];

		die unless has_transcript_if_required($g); #gh: exit(2) ?

		die unless has_protein_if_required($t);    #gh: exit(3) ?

		next unless transcript_is_in_scope($t); 

		
		die unless provided_transcript_residues_match_computed($t); #gh: exit(4) ?

		my $i = 0;
		while (my $p  = $t->translation($i)){
			die unless provided_translation_residues_match_computed($t, $p); #gh: exit(5) ?
			$i++;
		}
}
#gh: exit(0)?
print "DOCUMENT IS VALID\n";
#-----------------------------------------------------------------------------
#---------------------------------- SUBS -------------------------------------
#-----------------------------------------------------------------------------
sub provided_translation_residues_match_computed {
        my $t = shift;
	my $p = shift;

        if (defined($p->residues)){
                my $residues = compute_protein_residues($t, $p);  

		return 0 unless defined($residues);

                return 0 unless $p->residues() eq $residues;
        }
        else {
        }

        return 1;
}
#-----------------------------------------------------------------------------
sub compute_protein_residues {
	my $t = shift;
	my $p = shift;

	my $transcript_residues = compute_transcript_residues($t);
 
	my $translation_offset = $p->metaPos($t, 0);

	my $translation = $TM->translate_from_offset($transcript_residues, $translation_offset);

	($translation) = $translation =~ /([A-Z]+)/;

	return $translation;
}
#-----------------------------------------------------------------------------
sub provided_transcript_residues_match_computed {
	my $t = shift;

	if (defined($t->residues)){
		my $residues = compute_transcript_residues($t); 

		return 0 unless defined($residues);

		return 0 unless $t->residues() eq $residues;
	}
	else {
	}

	return 1;
}
#-----------------------------------------------------------------------------
sub transcript_is_in_scope {
	my $t = shift;

	foreach my $e (@{$t->exons}){
		return 0 unless $e->inScope();
	}

	return 1;
}
#-----------------------------------------------------------------------------
sub compute_transcript_residues {
	my $t = shift;

        my $nB = $t->nbeg();
        my $nE = $t->nend();

        my $residues  ='';
        foreach my $e (@{$t->exons}){
                unless (defined($e->residues)){
                        return undef;
                }
                $residues .= $e->residues();
        }

	return $residues;

}
#-----------------------------------------------------------------------------
sub has_transcript_if_required {
        my $g = shift;


        if ($SO->a_is_hyponym_of_b($g->type(), 'gene')){
                return 0 unless defined($g->transcript(0));
        }
        else {
        }

        return 1;
}
#-----------------------------------------------------------------------------
sub has_protein_if_required {
	my $t = shift;

	
	if ($SO->a_is_hyponym_of_b($t->type(), 'mRNA')){
		return 0 unless defined($t->translation(0));
	}
	else {
	}

	return 1;
}
#-----------------------------------------------------------------------------

__END__

=head1 NAME

cgl_validate

=head1 SYNOPSIS

  cgl_validate <chaos.xml file>

  cgl_validate CG33070.chaos.xml

=head1 DESCRIPTION

A simple script that attempts to check the semantic integrity of a
chaos.xml document.

=head1 DOCUMENTATION

L<http://www.yandell-lab.org/cgl>

=cut


